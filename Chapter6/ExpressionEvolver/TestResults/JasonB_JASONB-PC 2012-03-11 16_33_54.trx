<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="a2ccda1a-2927-492e-bb38-54fbdbf99acc" name="JasonB@JASONB-PC 2012-03-11 16:33:54" runUser="JasonB-PC\JasonB" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local Test Run" id="f0cc6f30-dc12-4e4f-ae35-284f1d4e5060">
    <Description>This is a default test run configuration for a local test run.</Description>
    <Deployment runDeploymentRoot="JasonB_JASONB-PC 2012-03-11 16_33_54">
      <DeploymentItem filename="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\packages\NSubstitute.1.1.0.0\lib\35\NSubstitute.dll" />
      <DeploymentItem filename="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\packages\Spackle.6.0\lib\net40\Spackle.vshost.exe" />
      <DeploymentItem filename="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\GeneticAlgorithm\bin\Debug\GeneticAlgorithm.dll" />
      <DeploymentItem filename="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\bin\Debug\ExpressionEvolver.dll" />
      <DeploymentItem filename="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\packages\Spackle.6.0\lib\net40\Spackle.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific>
        <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
          <AssemblyResolution>
            <TestDirectory useLoadContext="true" />
          </AssemblyResolution>
        </UnitTestRunConfig>
        <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
          <Browser name="Internet Explorer 7.0">
            <Headers>
              <Header name="User-Agent" value="Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" />
              <Header name="Accept" value="*/*" />
              <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
              <Header name="Accept-Encoding" value="GZIP" />
            </Headers>
          </Browser>
        </WebTestRunConfiguration>
      </TestTypeSpecific>
      <AgentRule name="LocalMachineDefaultRole">
        <DataCollectors>
          <DataCollector uri="datacollector://Microsoft/CodeCoverage/1.0" assemblyQualifiedName="Microsoft.VisualStudio.TestTools.CodeCoverage.CoveragePlugIn, Microsoft.VisualStudio.QualityTools.Plugins.CodeCoverage, PublicKeyToken=b03f5f7f11d50a3a" friendlyName="Code Coverage">
            <Configuration>
              <CodeCoverage xmlns="">
                <Regular>
                  <CodeCoverageItem binaryFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\bin\Debug\ExpressionEvolver.dll" pdbFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\bin\Debug\ExpressionEvolver.instr.pdb" instrumentInPlace="true" />
                  <CodeCoverageItem binaryFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\bin\Debug\ExpressionEvolver.Tests.dll" pdbFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\bin\Debug\ExpressionEvolver.Tests.instr.pdb" instrumentInPlace="true" />
                  <CodeCoverageItem binaryFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\GeneticAlgorithm\bin\Debug\GeneticAlgorithm.dll" pdbFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\GeneticAlgorithm\bin\Debug\GeneticAlgorithm.instr.pdb" instrumentInPlace="true" />
                  <CodeCoverageItem binaryFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\GeneticAlgorithm.Tests\bin\Debug\GeneticAlgorithm.Tests.dll" pdbFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\GeneticAlgorithm.Tests\bin\Debug\GeneticAlgorithm.Tests.instr.pdb" instrumentInPlace="true" />
                  <CodeCoverageItem binaryFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\SimpleGeneticAlgorithm\bin\Debug\SimpleGeneticAlgorithm.exe" pdbFile="G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\SimpleGeneticAlgorithm\bin\Debug\SimpleGeneticAlgorithm.instr.pdb" instrumentInPlace="true" />
                </Regular>
              </CodeCoverage>
            </Configuration>
          </DataCollector>
        </DataCollectors>
      </AgentRule>
    </Execution>
  </TestSettings>
  <Times creation="2012-03-11T16:33:54.6442149-05:00" queuing="2012-03-11T16:33:59.3274827-05:00" start="2012-03-11T16:33:59.4604903-05:00" finish="2012-03-11T16:34:05.5868408-05:00" />
  <ResultSummary outcome="Failed">
    <Counters total="159" executed="159" passed="138" error="0" failed="21" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <RunInfos>
      <RunInfo computerName="JASONB-PC" outcome="Warning" timestamp="2012-03-11T16:33:56.1413005-05:00">
        <Text>Instrumentation error: cannot find binary G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Client\bin\Debug\ExpressionEvolver.Client.exe.</Text>
      </RunInfo>
    </RunInfos>
    <ResultFiles>
      <ResultFile path="JASONB-PC\data.coverage" />
    </ResultFiles>
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="ReplaceParameterInUnsupportedBinaryExpression" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7df79ab5-7ace-17ec-de4c-7a8e23a8d813">
      <Execution id="98c2e301-c637-4776-9636-100f14df7360" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInUnsupportedBinaryExpression" />
    </UnitTest>
    <UnitTest name="CompressComplexExpressionWithUnnecessarySubtractionOfZeros" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="aa582909-a333-6920-c690-9f7793ad5b86">
      <Execution id="aa22f5d0-3b5f-405d-ba2a-7dae27ed4df1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressComplexExpressionWithUnnecessarySubtractionOfZeros" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInSubtractOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="71062e61-3ae8-3f1b-9341-76afa9391664">
      <Execution id="a85d1561-2aed-4688-a30e-3978f616e886" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInSubtractOnLeft" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessWhenResultExpectationIsException" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="bba56e8c-c7de-a40a-e256-d2721bd7ce36">
      <Execution id="2f4d7c39-993f-428c-9e7f-ea951bfda005" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessWhenResultExpectationIsException" />
    </UnitTest>
    <UnitTest name="ChangeValue" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="7f5a4d3c-3b53-b33b-cece-4d9cfd127a60">
      <Execution id="99924d4f-bfbc-4eb6-bc72-0d3ff66d395e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.ChromosomeTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ChangeValue" />
    </UnitTest>
    <UnitTest name="CheckMutationProbabilityOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1207f596-2127-86f6-4663-bd1a56aa43e2">
      <Execution id="7ab949ba-fff3-4aa3-8de4-efb8765c4fe8" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckMutationProbabilityOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CreateSubtractOfPositiveConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="4da37189-3a4c-8260-d5ac-643c82a07d23">
      <Execution id="72dd9446-6c12-4e57-b9bd-aa054942737d" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateSubtractOfPositiveConstantAndParameter" />
    </UnitTest>
    <UnitTest name="SelectFittestChildrenOnNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ad90abf8-49c4-ed93-d60a-b113fa04d26f">
      <Execution id="abcf7a3f-587e-4197-a21e-568a4030ee82" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersSelectFittestChildrenTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SelectFittestChildrenOnNullArgument" />
    </UnitTest>
    <UnitTest name="ReplaceDivide" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c5a2ab0b-1853-8e05-6421-92ece8e1baa7">
      <Execution id="86879331-5bc1-4ac9-9d4b-3180ed0ff316" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceDivide" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfZeroOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="b72108f6-cb42-1119-316b-bf696ea40c3d">
      <Execution id="028b48ad-be74-40c0-9838-d2c6880eebd5" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfZeroOnLeft" />
    </UnitTest>
    <UnitTest name="RunOneGenerationWithSuccessfulTerminationAndNoCrossover" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="6cfb34f3-cf67-fcce-1baa-ebc8434f621a">
      <Execution id="dc1f7c5e-cf32-4e2c-8074-0c2c51ee2d27" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="RunOneGenerationWithSuccessfulTerminationAndNoCrossover" />
    </UnitTest>
    <UnitTest name="CrossoverOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f9316b91-5da1-a00b-2ca8-83f832eb6330">
      <Execution id="c401e282-ca23-42ef-b0c1-80bee55ad3e3" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCrossoverTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CrossoverOnDisposedObject" />
    </UnitTest>
    <UnitTest name="RunWhenSolutionIsNullAndNumberOfGenerationRunsIsZero" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="19702ce4-7ac3-c622-d87f-0e20b860a280">
      <Execution id="509f6a79-0989-4ccd-a672-6ee6c8f17248" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="RunWhenSolutionIsNullAndNumberOfGenerationRunsIsZero" />
    </UnitTest>
    <UnitTest name="CompressWithDividingOfParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7e5877b2-242f-0253-e229-d4f2e0ca8889">
      <Execution id="6e7a5a70-78b1-41fc-8559-24919f184884" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithDividingOfParameters" />
    </UnitTest>
    <UnitTest name="CreateViaNullFuncCountAndVariance" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="06f7e831-f052-da54-ee25-37a5e26ef6a5">
      <Execution id="1c067f15-afc3-41ee-9c2a-baad87da31ca" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaNullFuncCountAndVariance" />
    </UnitTest>
    <UnitTest name="CreateWithException" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2a204cb5-d714-0fcb-fadf-2bd6cce71309">
      <Execution id="eb10cc7e-e5d4-4932-8353-97277c067e03" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverResultTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithException" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInAddOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1f4025ba-4998-4dab-974e-3adbc9d7adfc">
      <Execution id="cb527ee0-73f1-4eba-be89-8991e00b91a9" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInAddOnRight" />
    </UnitTest>
    <UnitTest name="EvaluateFitness" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="21b708f7-fcae-30fc-3af8-e3b2fa3ff076">
      <Execution id="31aa3080-4b6d-4ceb-af2f-a76e19934f75" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitness" />
    </UnitTest>
    <UnitTest name="IsValidWithInfinity" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="78808373-40d6-5f98-dca5-7ea3a22da11c">
      <Execution id="bec2f309-56d7-4013-987c-624bb7a1fa38" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="IsValidWithInfinity" />
    </UnitTest>
    <UnitTest name="CreateAddOfParameterAndPositiveConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0a1eb028-1383-9344-5f2d-09e986756014">
      <Execution id="8e5cf039-b10d-49a1-89da-1b17f7f2591a" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateAddOfParameterAndPositiveConstant" />
    </UnitTest>
    <UnitTest name="ReplaceSubtractRightPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="35243396-0749-8454-bfd6-04330f5a1e56">
      <Execution id="09f8319a-95ee-4a18-a9e9-b1f956333a80" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceSubtractRightPart" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingOfZeroOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="794a9f2e-dadb-de3a-ddef-35aaf7c66beb">
      <Execution id="de56d25f-6738-4298-b1b4-9630cdad85d6" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingOfZeroOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInMultiplyOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="6ae69f95-30b4-eaff-99c8-64d5d327f66a">
      <Execution id="fc03daa7-bcf5-4415-970e-d2d5492cced8" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInMultiplyOnRight" />
    </UnitTest>
    <UnitTest name="CheckNumberOfGenerationRunsOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="89686dd6-ef6f-28f9-c33f-67a7e3bfdf42">
      <Execution id="0fc4c353-0f89-4fa8-bcce-39eb7567067b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckNumberOfGenerationRunsOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfOneOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0c4ace6c-7ed9-12e4-0648-085ff7df49c2">
      <Execution id="07915e48-294f-4ecb-9251-9c3f16cfd281" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfOneOnLeft" />
    </UnitTest>
    <UnitTest name="GetNodeOfLambda" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="efa922fe-8424-cb0a-8c63-10210e0eae92">
      <Execution id="15f2cd82-15ec-487c-86c1-672524f7ca6f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeOfLambda" />
    </UnitTest>
    <UnitTest name="CreateSquareRootOfParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="47de5929-a17f-e0af-9cc0-d490622ae800">
      <Execution id="19c94860-b9fd-4475-a055-f538ab4512d5" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateSquareRootOfParameter" />
    </UnitTest>
    <UnitTest name="ReplacePowerRightPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="145ff47c-de52-9171-ed8a-b6592f3fb4d6">
      <Execution id="00e27aae-1f19-40fa-8d0e-438e7da21ee5" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplacePowerRightPart" />
    </UnitTest>
    <UnitTest name="Create" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="15e24d22-6af1-3d63-2c4d-6f45796ad421">
      <Execution id="b14fb438-0270-42e4-bcae-0d8cf153b617" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.ChromosomeTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Create" />
    </UnitTest>
    <UnitTest name="CrossoverWithNullParents" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="a7b466f3-b0b8-ec7e-a4c2-258f94c96244">
      <Execution id="353ec280-68f1-46b5-b4c2-1e32cb1562f2" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCrossoverTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CrossoverWithNullParents" />
    </UnitTest>
    <UnitTest name="CheckPopulationSizeOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="fdcecf0b-35f3-d3b9-d177-940c415b4c00">
      <Execution id="668420b6-38c4-4b5f-be71-57f543e9d6d1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckPopulationSizeOnDisposedObject" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="54e7c43a-171b-f420-6d20-9f4bc2e3b1de">
      <Execution id="f021cefc-7517-4de1-acf2-6d4c8278a037" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessWithNullArgument" />
    </UnitTest>
    <UnitTest name="GetNodeCountWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f2d06b69-1b53-bdfa-5c40-8170c9a0812c">
      <Execution id="2a91c9cc-bef7-40a7-8572-b697119271ef" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeCountWithNullArgument" />
    </UnitTest>
    <UnitTest name="CreateViaFuncCountAndVariance" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="dbf1ea4e-cd32-6e47-f99f-855986f06976">
      <Execution id="e0fb9db9-c12f-4e2c-9e02-bc0107b844a0" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncCountAndVariance" />
    </UnitTest>
    <UnitTest name="CreateWithFuncThrowingArithmeticException" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="29e73d84-a96e-0e71-40f4-5cb8b21dab4d">
      <Execution id="5b6a6949-c5d2-4df5-b84d-6a58bc2c15af" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithFuncThrowingArithmeticException" />
    </UnitTest>
    <UnitTest name="CreateAddOfPositiveConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="72da20f2-142e-0ff3-88b6-35c6b7254699">
      <Execution id="a81d23e6-7645-4b13-bb0d-10c014f58be1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateAddOfPositiveConstantAndParameter" />
    </UnitTest>
    <UnitTest name="CreateViaResultsAndNullRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="bd34201d-f4d6-1b8b-6e65-4505201b44ae">
      <Execution id="8be010be-1118-4ebc-a30e-9b396bbc1cb9" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaResultsAndNullRandom" />
    </UnitTest>
    <UnitTest name="CreateViaNullFunc" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1d1fd183-cd75-e8eb-862a-d510bede7ea1">
      <Execution id="848862d1-959b-4cb1-95f5-b3dd3ae0de4f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaNullFunc" />
    </UnitTest>
    <UnitTest name="CreateWhenPopulationIsEmpty" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="cc32baca-2626-858f-2354-1fdfc73c00f5">
      <Execution id="9b031aec-9f79-406d-8d02-77c66681be8b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.PopulationTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWhenPopulationIsEmpty" />
    </UnitTest>
    <UnitTest name="CompressWithDividingOfConstantsOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c014d805-2e93-5f2d-b8ae-00a710954321">
      <Execution id="e01a883a-3596-4ddb-b5e6-2844d1cb24a9" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithDividingOfConstantsOnRight" />
    </UnitTest>
    <UnitTest name="ReplaceDivideRightPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="31c847fb-b546-0474-03c5-f501dfd166e2">
      <Execution id="4a9bb2a0-866c-44d3-bec0-8169beb57c85" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceDivideRightPart" />
    </UnitTest>
    <UnitTest name="CreateMultiplyOfPositiveConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="48ac608d-f7e1-0a3d-7a3f-abf76ba3be0d">
      <Execution id="82dd79fd-7cd7-4592-b7a4-b1a6a1cd4046" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateMultiplyOfPositiveConstantAndParameter" />
    </UnitTest>
    <UnitTest name="CreateParameterOnlyBody" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c3ccfe1d-c4b4-9f37-0960-9ad2697c4c0d">
      <Execution id="cb0639c9-bbea-4b75-934d-7b494354ea48" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateParameterOnlyBody" />
    </UnitTest>
    <UnitTest name="CreateWithNullParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="1dc99201-9e6c-44cf-eb1d-932de7410663">
      <Execution id="acb69e8d-ab7e-431f-9811-31c8eefcee5f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithNullParameters" />
    </UnitTest>
    <UnitTest name="CreateSubtractOfParameterAndNegativeConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3088d711-edcf-8dce-5aa7-fac6385a2d6e">
      <Execution id="f6ed61fe-58cd-4f7c-80db-af48bea9b7e4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateSubtractOfParameterAndNegativeConstant" />
    </UnitTest>
    <UnitTest name="CreateExpressionWhenBothSidesAreConstantsNegativeConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="eb115a9c-28b6-13ae-0054-4f87878ed931">
      <Execution id="012faaee-5b5e-45bc-9323-e8a6d64a5070" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateExpressionWhenBothSidesAreConstantsNegativeConstantAndParameter" />
    </UnitTest>
    <UnitTest name="ReplacePowerLeftPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="adff05a7-0f7e-dabb-caa6-b91b39b6cc7b">
      <Execution id="83f44704-90d5-44f7-aafb-182657703e22" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplacePowerLeftPart" />
    </UnitTest>
    <UnitTest name="CreateAddOfParameterAndNegativeConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="8a15324f-18f1-590c-5e12-c65c48d91962">
      <Execution id="adfcf65d-0bee-497b-b0e8-554963873483" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateAddOfParameterAndNegativeConstant" />
    </UnitTest>
    <UnitTest name="GetNodeWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="b866fbd2-8aa4-0c63-2595-11ab29a3e586">
      <Execution id="f5b6436a-b0cf-4d27-af2a-58d94f8ccf93" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeWithNullArgument" />
    </UnitTest>
    <UnitTest name="CreateMultiplyOfParameterAndNegativeConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="93b3b298-35b3-c72d-e7ed-f372281c6941">
      <Execution id="d3f1c535-0ecb-433e-b972-37697334343e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateMultiplyOfParameterAndNegativeConstant" />
    </UnitTest>
    <UnitTest name="CreateSubtractOfNegativeConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="d5ef73cf-1f94-c408-005b-936413a6c714">
      <Execution id="4dc0451a-28e0-4f37-adbe-97e9c05db941" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateSubtractOfNegativeConstantAndParameter" />
    </UnitTest>
    <UnitTest name="Mutate" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="949e61c3-7d7c-be8d-9157-25c4f7ff819f">
      <Execution id="01ac632c-9558-4535-856b-633b4cc0a97b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersMutatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Mutate" />
    </UnitTest>
    <UnitTest name="Run" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="67449f0c-0ee7-648b-834c-e9ad41504b7c">
      <Execution id="22eb0aea-7a85-497f-8851-53127ed26b26" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Run" />
    </UnitTest>
    <UnitTest name="Create" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="bf25a094-527a-e4de-26fd-e6bc13571a24">
      <Execution id="a85d65ca-924f-49c9-b29e-a1b782da6b13" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Create" />
    </UnitTest>
    <UnitTest name="CreateViaFunc" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="d77ff7e3-5de7-96c2-846f-5560f6f1fc92">
      <Execution id="95467ea7-0c4c-4e6d-a5b0-08df8543d149" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFunc" />
    </UnitTest>
    <UnitTest name="CompressWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ce0e6eda-1070-1579-b632-edd303fc39c4">
      <Execution id="720db399-b6d8-4145-8c11-988bb2bc4569" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithNullArgument" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInSubtractOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0fdfbfd2-3ed8-18f2-9ce7-7f0e779f8148">
      <Execution id="78f81cff-092f-4645-ac50-3a852d539a73" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInSubtractOnRight" />
    </UnitTest>
    <UnitTest name="RunWhenNumberOfGenerationsIsZeroAndGenerationEventIsSetAndSolutionIsAlwaysNull" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="5c1e7265-83bf-b533-fb21-b4d5ca620738">
      <Execution id="b2aafbb3-ea43-4701-a43c-ef00bd544977" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="RunWhenNumberOfGenerationsIsZeroAndGenerationEventIsSetAndSolutionIsAlwaysNull" />
    </UnitTest>
    <UnitTest name="CreateWithNullRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c3f763d9-28f6-2067-89b7-5f6a8d0e3843">
      <Execution id="eefab11e-fade-4282-9155-855ed113c565" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithNullRandom" />
    </UnitTest>
    <UnitTest name="TerminatorWithTermination" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f8094fdf-0e77-87a9-d4c2-7fec63b1400d">
      <Execution id="c737cfea-81ae-41f3-ba3b-394bbe0d2e9a" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersTerminatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TerminatorWithTermination" />
    </UnitTest>
    <UnitTest name="CompressWithPowerOfConstantsOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="6fe13556-2875-4182-2dec-34a05088fc82">
      <Execution id="912218a7-5634-41a7-80d8-5746151cf54d" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithPowerOfConstantsOnLeft" />
    </UnitTest>
    <UnitTest name="CreateViaFuncCountVarianceAndRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="6964924c-05d1-dbad-4f3a-9e7ab1b0e8a1">
      <Execution id="0ac8d364-9fe0-4d25-8d93-3a7a570fe787" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncCountVarianceAndRandom" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInPowerOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c0774163-4740-3786-cd9e-22e121b74125">
      <Execution id="2d993d60-05c3-4fc0-a72b-ba5a2ea4f834" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInPowerOnLeft" />
    </UnitTest>
    <UnitTest name="CreateDivideOfParameterAndNegativeConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2006d7a3-3bc7-bea9-2c55-c3e6f5f4392c">
      <Execution id="43690d14-3322-4ee5-9e6a-5ef8d05a01f3" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateDivideOfParameterAndNegativeConstant" />
    </UnitTest>
    <UnitTest name="CheckProperties" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="422c856a-2f20-9839-4fc9-5c7697e83323">
      <Execution id="f68aee58-9011-4200-b71f-f28fbad341c3" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckProperties" />
    </UnitTest>
    <UnitTest name="ReplaceUnsupportedBinaryExpression" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="bf543379-04a4-a02b-8d45-d6415372de17">
      <Execution id="d098a18c-e1d8-4d1e-a4a1-1e2416542184" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceUnsupportedBinaryExpression" />
    </UnitTest>
    <UnitTest name="TerminatorWithNoTermination" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7f4f22f6-66f8-6241-4d21-2df753471ffb">
      <Execution id="82e08cd6-8a99-4896-9207-364e05c0c553" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersTerminatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TerminatorWithNoTermination" />
    </UnitTest>
    <UnitTest name="GeneratePopulationOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="beaca5b9-4d5b-cf84-2fca-3b3ad73419d3">
      <Execution id="e1c62756-c508-442f-b8f8-4f0fdbac4589" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersGeneratePopulationTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GeneratePopulationOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CompressWithDividingOfConstantsOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="98ed3766-1d5a-b3bf-a72c-cada89a514ee">
      <Execution id="4bd59dd4-1de5-437a-b0a0-cde14f9ff4ce" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithDividingOfConstantsOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInMultiplyOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3dfc0b52-6f63-b555-83e6-96089165101a">
      <Execution id="42b7c219-10f3-4248-917e-9e1e535cb865" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInMultiplyOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceMultiplyLeftPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7720a32d-4468-60d4-518c-be6ade616b3f">
      <Execution id="56d56fc9-7bf0-49fc-ae4c-4febb01bc92b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceMultiplyLeftPart" />
    </UnitTest>
    <UnitTest name="SelectFittestChildren" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="9bebaeb1-9206-e380-e60f-f3b97f9382d4">
      <Execution id="74259da4-9f01-4d93-b5bd-d13d7b8b4118" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersSelectFittestChildrenTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SelectFittestChildren" />
    </UnitTest>
    <UnitTest name="MutateOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7d3bdd0f-891f-e270-3572-e64070ef3d7d">
      <Execution id="f20e3cc9-c81d-40d6-8fb9-8d8c4a8b45a4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersMutatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="MutateOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CrossoverWithEmptyParents" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="901a8106-e620-0cc3-b9ff-33c393033365">
      <Execution id="c0ae158f-0415-49d6-a811-a86174302632" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCrossoverTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CrossoverWithEmptyParents" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="d3aa65ac-a753-4de0-9a8c-d170f7009390">
      <Execution id="8858a409-d4f6-4232-975d-e5dbee787d9f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfParameters" />
    </UnitTest>
    <UnitTest name="CompressWithPowerOfParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="9d87bc7a-0c76-c5fb-53a5-bb25a5d44672">
      <Execution id="271bc23f-d938-45b2-a43d-da8c58c4d732" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithPowerOfParameters" />
    </UnitTest>
    <UnitTest name="CreateWhenPopulationIsNull" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="4592dc73-1999-6d44-649d-bf8a50b592d8">
      <Execution id="affa87af-0e05-4b65-bbdd-024170a6d64b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.PopulationTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWhenPopulationIsNull" />
    </UnitTest>
    <UnitTest name="ReplaceMultiply" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="053b0821-25f9-f741-d4a7-ebe0572d625e">
      <Execution id="2b86c8e6-e5dc-4365-ab2f-8e744511b128" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceMultiply" />
    </UnitTest>
    <UnitTest name="CreateDivideOfPositiveConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f8762649-4dde-5174-f3b6-4cb3c3013724">
      <Execution id="8dcabceb-b470-47cd-bf92-fa6e05c22fd0" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateDivideOfPositiveConstantAndParameter" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInDivideOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="9c89f597-df52-942d-68ee-3d7a931b4c43">
      <Execution id="02d7443a-ba23-4cce-8841-9f2d8cda45fc" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInDivideOnLeft" />
    </UnitTest>
    <UnitTest name="RunOneGenerationWithSuccessfulTerminationAndCrossover" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="c70a18ef-9246-da0c-496a-a539ee306630">
      <Execution id="4ca454ff-da52-43d9-8a04-7998ab1ac38e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="RunOneGenerationWithSuccessfulTerminationAndCrossover" />
    </UnitTest>
    <UnitTest name="CompressWithAddingOfParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5a18b7bc-361b-040b-6eaa-d1c0e78f6279">
      <Execution id="6cbd94c7-d0e9-4820-b3fe-b0adc64c70b8" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithAddingOfParameters" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingOfConstantsOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ee1c1495-b6ee-41b5-a0aa-3f83ac036054">
      <Execution id="a79b7224-ca4d-47be-9a6e-b2e702c990fd" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingOfConstantsOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceAdd" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1794289f-f6e3-0f83-295c-a4139fb8fa2c">
      <Execution id="fe99755c-29b9-4f9a-bc00-2b2a4a4bb735" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceAdd" />
    </UnitTest>
    <UnitTest name="CreateMultiplyOfParameterAndPositiveConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="70c07d74-6f1c-4c48-5644-c1d8de7e3b7b">
      <Execution id="a2a421ff-2ebe-4921-b92a-40b873c36899" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateMultiplyOfParameterAndPositiveConstant" />
    </UnitTest>
    <UnitTest name="ReplaceDivideLeftPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="143a9f37-3324-4630-72c9-d713490ce99c">
      <Execution id="94a9ada4-1797-402e-8333-2d882d94beb6" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceDivideLeftPart" />
    </UnitTest>
    <UnitTest name="SelectFittestChildrenOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="d64f49d1-7c69-0455-071b-424f4bab12aa">
      <Execution id="0a4aab5b-99a1-4f55-9351-3ca9df6418d4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersSelectFittestChildrenTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SelectFittestChildrenOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CreateSubtractOfParameterAndPositiveConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="802c6dbd-6d3c-650b-52f4-8d9e60e1172f">
      <Execution id="8f5b01d0-13ec-43c6-9b31-b891ac7da49d" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateSubtractOfParameterAndPositiveConstant" />
    </UnitTest>
    <UnitTest name="CreateViaFuncAndRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="48e95875-2a98-b591-f96f-8113bb06edac">
      <Execution id="ca4cce48-f293-49e0-82a1-0e982103ddd1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncAndRandom" />
    </UnitTest>
    <UnitTest name="IsValidWithNaN" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="9be014b3-020f-bf8f-33fd-dae1c97f1ae0">
      <Execution id="a4deba5e-325f-404f-b3c1-c3047cec995f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="IsValidWithNaN" />
    </UnitTest>
    <UnitTest name="CreateViaFuncAndNullRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="7dfec062-4513-dcee-89e6-5fca85fb96d0">
      <Execution id="fcd0d768-0ec8-43a2-90e8-5c84dc8a7b99" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncAndNullRandom" />
    </UnitTest>
    <UnitTest name="CreateWithResult" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="cb17197f-0154-7523-6635-0ed45555e335">
      <Execution id="0e40eedc-0c79-483a-be58-b9aa5033911e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverResultTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithResult" />
    </UnitTest>
    <UnitTest name="CreateForUnsupportedOperation" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1ccba777-b05e-b0ae-2be9-56919cb0c37d">
      <Execution id="e9e2e4ad-39f3-4232-aac8-5784dc65894f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateForUnsupportedOperation" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessWithExceptionAndResultExpectationIsException" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="1320ac90-961c-51d3-614d-725eebb09f8c">
      <Execution id="37c36f13-b406-4c5f-afaa-311fca428576" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessWithExceptionAndResultExpectationIsException" />
    </UnitTest>
    <UnitTest name="CompressWithDivideSameDividentAndDivisor" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5cc56040-b76a-8366-4002-46cfacb9f88b">
      <Execution id="612a9c41-0e04-49ac-a9f9-852f2d6c1653" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithDivideSameDividentAndDivisor" />
    </UnitTest>
    <UnitTest name="CreateAddOfNegativeConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="dd3a28f8-36e3-d38f-5430-d99446e2ec93">
      <Execution id="382623b7-0716-4d49-a8de-c5ed75fcff59" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateAddOfNegativeConstantAndParameter" />
    </UnitTest>
    <UnitTest name="CheckCrossoverProbabilityOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="9060561f-35ae-fe31-72a2-ffb5c8690d4d">
      <Execution id="9e4e3569-b3e4-4869-b127-26526a7c13b8" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckCrossoverProbabilityOnDisposedObject" />
    </UnitTest>
    <UnitTest name="Replace" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="cb9a5a97-4d41-ec98-f014-c7ae293c1bfa">
      <Execution id="daf0f1f0-9a84-4a0e-b61b-0f576e99861f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Replace" />
    </UnitTest>
    <UnitTest name="CreateWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="918bbf56-93ef-a46d-db60-ac0625525817">
      <Execution id="c9e090c7-1f55-473a-91ad-1e25492726e4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverResultTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithNullArgument" />
    </UnitTest>
    <UnitTest name="TerminatorOnNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="70d5cf82-f4fd-a904-e439-8fabc681a325">
      <Execution id="60caebaa-6654-4d4b-8891-36c17528baa0" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersTerminatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TerminatorOnNullArgument" />
    </UnitTest>
    <UnitTest name="CreateViaFuncCountVarianceAndNullRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="a07266ba-5b60-f63e-b1f6-6d8bb37febf9">
      <Execution id="67d5bbf4-62e5-4d3b-97f5-df3efa5566ea" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncCountVarianceAndNullRandom" />
    </UnitTest>
    <UnitTest name="CompressWithUnsupportedBinaryExpressionAndBothConstants" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="308480eb-dfbc-044e-7ad0-3633ede97af4">
      <Execution id="8bc56cb9-3aeb-4959-9ab6-8d8808c68296" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithUnsupportedBinaryExpressionAndBothConstants" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingWithSameExpressionOnBothSides" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="942514c3-c01e-bf4f-4ef5-ba31bb835b5e">
      <Execution id="57558827-9554-4523-b16a-0579d33c971b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingWithSameExpressionOnBothSides" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="30ae8f16-4327-5e86-d02e-08a0a4d67bfc">
      <Execution id="ecae7077-c947-4556-9c0a-d63db409e3ee" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessOnDisposedObject" />
    </UnitTest>
    <UnitTest name="ReplaceMultiplyRightPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="35f73dc4-f4ca-dc1d-53a8-c6464931d223">
      <Execution id="277115ab-d4df-4c8f-bf19-61a5755550a4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceMultiplyRightPart" />
    </UnitTest>
    <UnitTest name="GetNodeWithConstantAsTarget" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="62f8e71d-ac9b-da09-2065-a6daa987f6db">
      <Execution id="0b7ad731-6283-48e9-adb3-e24db5c3f166" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeWithConstantAsTarget" />
    </UnitTest>
    <UnitTest name="MutateWithNoMutation" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="227b5219-c338-c4e1-2be0-82d8d2bf1f79">
      <Execution id="6ad9467e-ef77-47f2-848a-493222923394" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersMutatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="MutateWithNoMutation" />
    </UnitTest>
    <UnitTest name="CreateWithNullParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5219aee5-5266-a0b7-43bd-564cde3a9c45">
      <Execution id="3f50a903-8106-4dcd-b032-1b3e3173c6c5" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithNullParameter" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingOfConstantsOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3ec17789-7699-9190-0695-6a4a2a517256">
      <Execution id="6489b840-ab7e-4ada-9b06-16efafeef545" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingOfConstantsOnRight" />
    </UnitTest>
    <UnitTest name="CheckTaskCountOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="88e29ecc-7226-820d-9dd4-7b7172cc23ae">
      <Execution id="8bf61dd4-761f-4c0e-b4a8-2332f1494680" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckTaskCountOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CompressWithAddingOfZeroOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5904b435-2e19-bcec-1366-5ea36cf3993e">
      <Execution id="86480c5e-f5f7-4f54-a62e-a81e754880f2" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithAddingOfZeroOnRight" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInPowerOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3c02a3fa-67e0-4644-c8f0-1e23de818dff">
      <Execution id="758bb62f-7909-46f1-8d6f-f845796ad67a" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInPowerOnRight" />
    </UnitTest>
    <UnitTest name="CreateMultiplyOfNegativeConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="99184710-3de1-c7d4-818c-f2ba2522551b">
      <Execution id="3ca5b236-3b77-42b7-94ab-0990efcf020f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateMultiplyOfNegativeConstantAndParameter" />
    </UnitTest>
    <UnitTest name="CreateViaNullResults" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="6da29a6a-d29a-26b1-7dd7-0fdd1d5a7759">
      <Execution id="7c9d5cae-29ff-4020-9b29-e8fbf70789dc" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaNullResults" />
    </UnitTest>
    <UnitTest name="CreateDivideOfParameterAndPositiveConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="633df4d2-10a9-6f34-07a5-64a8797c6ca2">
      <Execution id="0c24da3d-00b4-45b0-bb0e-c212a45cfe45" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateDivideOfParameterAndPositiveConstant" />
    </UnitTest>
    <UnitTest name="ReplaceSubtract" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f69298a7-5abb-da05-7a04-2b502bb6d9b8">
      <Execution id="0a44df79-d5f3-4908-9d4f-6772899f302e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceSubtract" />
    </UnitTest>
    <UnitTest name="IsValidWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="065e1c04-54e8-84f8-0e4a-ff671adc3044">
      <Execution id="6d72fb4b-94a0-499e-9c6a-c1e46fb75b1e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="IsValidWithNullArgument" />
    </UnitTest>
    <UnitTest name="CompressComplexExpressionForSubtractingSameValues" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="feee3ce0-ca18-21c9-fc6b-c58977af3bbe">
      <Execution id="8e44983a-0fc8-4b8c-afe5-7749183d52cb" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressComplexExpressionForSubtractingSameValues" />
    </UnitTest>
    <UnitTest name="CopyOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="74fc041a-f030-2675-7b09-8d44a6dd98a8">
      <Execution id="3ec25629-bdb6-4145-90b8-eba4b70e4ae1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCopyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CopyOnDisposedObject" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfZeroOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="aadb1ec8-7bce-3611-7252-55dc9eac7d4c">
      <Execution id="8454f403-4d04-4fa6-a138-98692219ef13" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfZeroOnRight" />
    </UnitTest>
    <UnitTest name="CreateViaEmptyResults" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="e4db20be-90e9-179b-c19f-4ef2c00bf22a">
      <Execution id="3bd43ae7-cad7-4204-acbd-2e29c99d49c8" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaEmptyResults" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInAddOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="b9122787-c565-f85f-04fa-406c138ae10a">
      <Execution id="3f65e322-667d-4cae-b80a-6e71979aa25f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInAddOnLeft" />
    </UnitTest>
    <UnitTest name="CheckNumberOfGenerationsOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3ea9eb35-b2df-ceaf-ddab-cd74ffd89565">
      <Execution id="37d58304-f16d-457e-8baf-32c7b8ec1e63" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersPropertyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckNumberOfGenerationsOnDisposedObject" />
    </UnitTest>
    <UnitTest name="GetNodeCountOfLambda" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="050e5afe-fe5e-ac29-385e-d0e4b90def50">
      <Execution id="50d4ec74-227e-4765-85bb-3e71c205c0c1" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeCountOfLambda" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfConstantsOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ad986776-9530-256a-a701-5b49f8c704a3">
      <Execution id="a0ce5979-22bb-48e7-b0d7-3606d43e2910" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfConstantsOnRight" />
    </UnitTest>
    <UnitTest name="CompressWithAddingOfConstantsOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2062b40d-5857-83a6-e5a8-c21b301a446f">
      <Execution id="51617cc7-0580-4a0d-9711-58e186fb6e06" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithAddingOfConstantsOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceAddLeftPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="76829c24-cc92-17a3-54c7-e57804e46d6d">
      <Execution id="78ddf3bd-ee4d-47e0-a16a-a30b57584b1a" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceAddLeftPart" />
    </UnitTest>
    <UnitTest name="Create" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="29b5739f-b636-b53f-9dc3-55325176d361">
      <Execution id="0aeca6b3-4108-4514-a9a0-807c36dfa124" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.PopulationTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Create" />
    </UnitTest>
    <UnitTest name="TerminatorOnDisposedObject" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="f6f5b952-6f59-66de-3925-4733e242b79a">
      <Execution id="eae2ddbe-0dba-4cfa-b0b4-79c4b4a4848e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersTerminatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TerminatorOnDisposedObject" />
    </UnitTest>
    <UnitTest name="ReplaceAddRightPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0a005ba1-ab3a-037d-7b92-619d37d1e47a">
      <Execution id="23eb4280-b2d4-4559-9ddf-e18417b1efd0" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceAddRightPart" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfOneOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="753d70bb-be76-a905-ef28-b6f386c63ed6">
      <Execution id="72490745-19d7-4df4-8f03-b923e0200771" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfOneOnRight" />
    </UnitTest>
    <UnitTest name="ReplaceParameterInDivideOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="72ece11d-c0fb-e647-f1a3-45b88a79e542">
      <Execution id="e88d1286-5433-4098-9436-2f7c2628530f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceParameterInDivideOnRight" />
    </UnitTest>
    <UnitTest name="CreateViaFuncZeroCountAndVariance" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="041a799d-12e4-80a8-114c-6c26c8a7ea36">
      <Execution id="ce584080-eca2-4d39-9fcd-de23c1776b3d" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaFuncZeroCountAndVariance" />
    </UnitTest>
    <UnitTest name="CompressComplexExpressionWithManyConstants" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="849564e3-0417-8269-e89a-7622011fa6d3">
      <Execution id="d4f538a3-689e-4b29-b8d3-270be75b040f" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressComplexExpressionWithManyConstants" />
    </UnitTest>
    <UnitTest name="Crossover" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2bd22e7d-67dd-5712-54d0-c103ac961a51">
      <Execution id="bae3827c-13d8-4ba6-a3eb-6c6a36db27ba" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCrossoverTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Crossover" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingOfZeroOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="772c0984-e5a3-be5c-4f97-0bf98eb4e1f1">
      <Execution id="6c9f0822-a650-4a20-babb-9068c197ff65" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingOfZeroOnRight" />
    </UnitTest>
    <UnitTest name="CreateViaResultsAndRandom" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="d45d383d-b0e8-35a9-9d25-957bda1ab547">
      <Execution id="c53c9b22-0434-4d84-9b59-be70c4b44f1e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaResultsAndRandom" />
    </UnitTest>
    <UnitTest name="ReplacePower" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c3f2bd76-0a8d-69b3-b781-986375cfb603">
      <Execution id="e3c2c64c-c5de-493c-b3d2-dd33facbb1c6" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplacePower" />
    </UnitTest>
    <UnitTest name="GeneratePopulation" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5ab775b9-4118-ee7a-d65b-b0095acb4c4d">
      <Execution id="34e66c07-5647-491c-bc18-109ce8fa639e" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersGeneratePopulationTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GeneratePopulation" />
    </UnitTest>
    <UnitTest name="MutateWithNullArgument" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="57dad163-f15c-4b88-320e-fb2bab537e8b">
      <Execution id="802162f1-ccab-415c-aa06-bab2906e0e12" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersMutatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="MutateWithNullArgument" />
    </UnitTest>
    <UnitTest name="GetNodeWithParameterAsTarget" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3fde86df-ebe5-6150-f697-58c3c1018860">
      <Execution id="05a49135-568c-4760-a453-03959877395d" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="GetNodeWithParameterAsTarget" />
    </UnitTest>
    <UnitTest name="CreateDivideOfNegativeConstantAndParameter" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ee34faeb-5794-e3cb-90d0-7889ef3a2289">
      <Execution id="bfb64d03-921b-4961-91cc-7957c5204c88" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.RandomExpressionGeneratorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateDivideOfNegativeConstantAndParameter" />
    </UnitTest>
    <UnitTest name="CompressWithAddingOfZeroOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="433c0367-98dc-badc-0cf7-8e4f6b1d46a9">
      <Execution id="df56476e-5bac-4158-af49-3b2dbd14d28b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithAddingOfZeroOnLeft" />
    </UnitTest>
    <UnitTest name="ReplaceConstant" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0157a136-4bbe-5378-7479-dfce9e4a7048">
      <Execution id="505b5a70-2723-4413-9b60-ff2de77e58d2" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceConstant" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessWithExceptionAndResultExpectationIsNotException" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="c1cad183-8169-5200-ebfd-3c3d95b13a6a">
      <Execution id="3c15479e-5ca5-43ac-ab1a-99e02d2ba62a" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessWithExceptionAndResultExpectationIsNotException" />
    </UnitTest>
    <UnitTest name="CreateWithFuncReturnNaNAndInfinity" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="78f0771b-a47c-78a5-a57f-2f917c847db8">
      <Execution id="dde0300c-a93e-4c09-be83-a1774371b486" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateWithFuncReturnNaNAndInfinity" />
    </UnitTest>
    <UnitTest name="CompressWithPowerOfConstantsOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="3e4dfb93-5301-52b0-9bed-c5f315444730">
      <Execution id="f3078060-8be3-4d3b-98ad-f0511fa72330" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithPowerOfConstantsOnRight" />
    </UnitTest>
    <UnitTest name="SelectFittestChildrenWhenPopulationIsTooSmall" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2d763704-248a-e16b-61d3-fc92f2a7e477">
      <Execution id="9e71e220-eba9-48ce-9618-6ffd89fe188b" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersSelectFittestChildrenTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SelectFittestChildrenWhenPopulationIsTooSmall" />
    </UnitTest>
    <UnitTest name="IsValid" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5bd294c3-cfea-00ed-62f0-c24620691c0f">
      <Execution id="7a4de215-1f53-4b24-b2cc-94bbc5d52445" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="IsValid" />
    </UnitTest>
    <UnitTest name="Copy" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="83e4aa55-a113-b029-00fd-1fd47a71a678">
      <Execution id="d04181dc-6826-46bd-b54a-33995a6cc077" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersCopyTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Copy" />
    </UnitTest>
    <UnitTest name="RunOneGenerationWithUnsuccessfulTermination" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\geneticalgorithm.tests\bin\debug\geneticalgorithm.tests.dll" id="edefbbf0-6ba6-354f-ebeb-47134e27a2ac">
      <Execution id="356f110e-b7a9-48f4-874c-ad0f675d7127" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/GeneticAlgorithm.Tests/bin/Debug/GeneticAlgorithm.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="GeneticAlgorithm.Tests.GeneticAlgorithmTests, GeneticAlgorithm.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="RunOneGenerationWithUnsuccessfulTermination" />
    </UnitTest>
    <UnitTest name="EvaluateFitnessWhenResultIsNaN" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="68ee1d42-8dc1-a4f4-80f5-c07ab4859c9f">
      <Execution id="dffd4fbb-825d-4a75-b731-8ed02db15408" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="EvaluateFitnessWhenResultIsNaN" />
    </UnitTest>
    <UnitTest name="CompressWithSubtractingOfParameters" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="31c0f085-7e90-61c9-6c1f-4e0d001ce21a">
      <Execution id="828353ee-02c1-483c-b9ea-a1468f06f1b4" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithSubtractingOfParameters" />
    </UnitTest>
    <UnitTest name="CreateViaResults" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="2d9815e2-8df5-f6eb-f115-253c142fe8f0">
      <Execution id="31f32aa6-0efe-4127-ba23-b26d1960cd10" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersConstructionTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreateViaResults" />
    </UnitTest>
    <UnitTest name="ReplaceSubtractLeftPart" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="ec92ad0b-8559-bd43-9e1e-87fa0e671c77">
      <Execution id="f7456941-212d-403d-abc9-e421e7c648b0" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ReplacementVisitorTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ReplaceSubtractLeftPart" />
    </UnitTest>
    <UnitTest name="CompressSimpleExpressionWithUnnecessarySubtractionOfZeros" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="0e51d482-09cc-d45a-16cf-6d500a8313ba">
      <Execution id="47e34a60-826e-4f93-8151-ca837816e079" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressSimpleExpressionWithUnnecessarySubtractionOfZeros" />
    </UnitTest>
    <UnitTest name="CompressWithAddingOfConstantsOnRight" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="08df9b50-11da-c519-3dd6-b447183bdbfe">
      <Execution id="72959fa7-6622-4e37-b34a-fef047bb1dd9" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithAddingOfConstantsOnRight" />
    </UnitTest>
    <UnitTest name="CompressWithNestedPowers" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="4b7718e1-b38d-1d37-dec4-222a79c50897">
      <Execution id="d809e0ab-7c76-4681-addd-29e723bcba49" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithNestedPowers" />
    </UnitTest>
    <UnitTest name="CompressWithMultiplyingOfConstantsOnLeft" storage="g:\jasonbock\personal\writing\metaprogramming .net\code samples\metadotnetbook\chapter6\expressionevolver\expressionevolver.tests\bin\debug\expressionevolver.tests.dll" id="5bf88f68-aff0-b518-65f8-5460a51be064">
      <Execution id="afadf9e1-a7e0-4a6a-b5ab-a4d31d41f753" />
      <TestMethod codeBase="G:/JasonBock/Personal/Writing/Metaprogramming .NET/Code Samples/MetaDotNetBook/Chapter6/ExpressionEvolver/ExpressionEvolver.Tests/bin/Debug/ExpressionEvolver.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="ExpressionEvolver.Tests.ExpressionExtensionsTests, ExpressionEvolver.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompressWithMultiplyingOfConstantsOnLeft" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="0157a136-4bbe-5378-7479-dfce9e4a7048" executionId="505b5a70-2723-4413-9b60-ff2de77e58d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="041a799d-12e4-80a8-114c-6c26c8a7ea36" executionId="ce584080-eca2-4d39-9fcd-de23c1776b3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="050e5afe-fe5e-ac29-385e-d0e4b90def50" executionId="50d4ec74-227e-4765-85bb-3e71c205c0c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="053b0821-25f9-f741-d4a7-ebe0572d625e" executionId="2b86c8e6-e5dc-4365-ab2f-8e744511b128" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="065e1c04-54e8-84f8-0e4a-ff671adc3044" executionId="6d72fb4b-94a0-499e-9c6a-c1e46fb75b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06f7e831-f052-da54-ee25-37a5e26ef6a5" executionId="1c067f15-afc3-41ee-9c2a-baad87da31ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08df9b50-11da-c519-3dd6-b447183bdbfe" executionId="72959fa7-6622-4e37-b34a-fef047bb1dd9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a005ba1-ab3a-037d-7b92-619d37d1e47a" executionId="23eb4280-b2d4-4559-9ddf-e18417b1efd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a1eb028-1383-9344-5f2d-09e986756014" executionId="8e5cf039-b10d-49a1-89da-1b17f7f2591a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c4ace6c-7ed9-12e4-0648-085ff7df49c2" executionId="07915e48-294f-4ecb-9251-9c3f16cfd281" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e51d482-09cc-d45a-16cf-6d500a8313ba" executionId="47e34a60-826e-4f93-8151-ca837816e079" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0fdfbfd2-3ed8-18f2-9ce7-7f0e779f8148" executionId="78f81cff-092f-4645-ac50-3a852d539a73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1207f596-2127-86f6-4663-bd1a56aa43e2" executionId="7ab949ba-fff3-4aa3-8de4-efb8765c4fe8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1320ac90-961c-51d3-614d-725eebb09f8c" executionId="37c36f13-b406-4c5f-afaa-311fca428576" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="143a9f37-3324-4630-72c9-d713490ce99c" executionId="94a9ada4-1797-402e-8333-2d882d94beb6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="145ff47c-de52-9171-ed8a-b6592f3fb4d6" executionId="00e27aae-1f19-40fa-8d0e-438e7da21ee5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15e24d22-6af1-3d63-2c4d-6f45796ad421" executionId="b14fb438-0270-42e4-bcae-0d8cf153b617" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1794289f-f6e3-0f83-295c-a4139fb8fa2c" executionId="fe99755c-29b9-4f9a-bc00-2b2a4a4bb735" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19702ce4-7ac3-c622-d87f-0e20b860a280" executionId="509f6a79-0989-4ccd-a672-6ee6c8f17248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ccba777-b05e-b0ae-2be9-56919cb0c37d" executionId="e9e2e4ad-39f3-4232-aac8-5784dc65894f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d1fd183-cd75-e8eb-862a-d510bede7ea1" executionId="848862d1-959b-4cb1-95f5-b3dd3ae0de4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1dc99201-9e6c-44cf-eb1d-932de7410663" executionId="acb69e8d-ab7e-431f-9811-31c8eefcee5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f4025ba-4998-4dab-974e-3adbc9d7adfc" executionId="cb527ee0-73f1-4eba-be89-8991e00b91a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2006d7a3-3bc7-bea9-2c55-c3e6f5f4392c" executionId="43690d14-3322-4ee5-9e6a-5ef8d05a01f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2062b40d-5857-83a6-e5a8-c21b301a446f" executionId="51617cc7-0580-4a0d-9711-58e186fb6e06" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21b708f7-fcae-30fc-3af8-e3b2fa3ff076" executionId="31aa3080-4b6d-4ceb-af2f-a76e19934f75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="227b5219-c338-c4e1-2be0-82d8d2bf1f79" executionId="6ad9467e-ef77-47f2-848a-493222923394" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29b5739f-b636-b53f-9dc3-55325176d361" executionId="0aeca6b3-4108-4514-a9a0-807c36dfa124" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29e73d84-a96e-0e71-40f4-5cb8b21dab4d" executionId="5b6a6949-c5d2-4df5-b84d-6a58bc2c15af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a204cb5-d714-0fcb-fadf-2bd6cce71309" executionId="eb10cc7e-e5d4-4932-8353-97277c067e03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2bd22e7d-67dd-5712-54d0-c103ac961a51" executionId="bae3827c-13d8-4ba6-a3eb-6c6a36db27ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d763704-248a-e16b-61d3-fc92f2a7e477" executionId="9e71e220-eba9-48ce-9618-6ffd89fe188b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d9815e2-8df5-f6eb-f115-253c142fe8f0" executionId="31f32aa6-0efe-4127-ba23-b26d1960cd10" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="308480eb-dfbc-044e-7ad0-3633ede97af4" executionId="8bc56cb9-3aeb-4959-9ab6-8d8808c68296" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3088d711-edcf-8dce-5aa7-fac6385a2d6e" executionId="f6ed61fe-58cd-4f7c-80db-af48bea9b7e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30ae8f16-4327-5e86-d02e-08a0a4d67bfc" executionId="ecae7077-c947-4556-9c0a-d63db409e3ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31c0f085-7e90-61c9-6c1f-4e0d001ce21a" executionId="828353ee-02c1-483c-b9ea-a1468f06f1b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31c847fb-b546-0474-03c5-f501dfd166e2" executionId="4a9bb2a0-866c-44d3-bec0-8169beb57c85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35243396-0749-8454-bfd6-04330f5a1e56" executionId="09f8319a-95ee-4a18-a9e9-b1f956333a80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35f73dc4-f4ca-dc1d-53a8-c6464931d223" executionId="277115ab-d4df-4c8f-bf19-61a5755550a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c02a3fa-67e0-4644-c8f0-1e23de818dff" executionId="758bb62f-7909-46f1-8d6f-f845796ad67a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3dfc0b52-6f63-b555-83e6-96089165101a" executionId="42b7c219-10f3-4248-917e-9e1e535cb865" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e4dfb93-5301-52b0-9bed-c5f315444730" executionId="f3078060-8be3-4d3b-98ad-f0511fa72330" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ea9eb35-b2df-ceaf-ddab-cd74ffd89565" executionId="37d58304-f16d-457e-8baf-32c7b8ec1e63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ec17789-7699-9190-0695-6a4a2a517256" executionId="6489b840-ab7e-4ada-9b06-16efafeef545" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fde86df-ebe5-6150-f697-58c3c1018860" executionId="05a49135-568c-4760-a453-03959877395d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="422c856a-2f20-9839-4fc9-5c7697e83323" executionId="f68aee58-9011-4200-b71f-f28fbad341c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="433c0367-98dc-badc-0cf7-8e4f6b1d46a9" executionId="df56476e-5bac-4158-af49-3b2dbd14d28b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4592dc73-1999-6d44-649d-bf8a50b592d8" executionId="affa87af-0e05-4b65-bbdd-024170a6d64b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47de5929-a17f-e0af-9cc0-d490622ae800" executionId="19c94860-b9fd-4475-a055-f538ab4512d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48ac608d-f7e1-0a3d-7a3f-abf76ba3be0d" executionId="82dd79fd-7cd7-4592-b7a4-b1a6a1cd4046" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48e95875-2a98-b591-f96f-8113bb06edac" executionId="ca4cce48-f293-49e0-82a1-0e982103ddd1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b7718e1-b38d-1d37-dec4-222a79c50897" executionId="d809e0ab-7c76-4681-addd-29e723bcba49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4da37189-3a4c-8260-d5ac-643c82a07d23" executionId="72dd9446-6c12-4e57-b9bd-aa054942737d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5219aee5-5266-a0b7-43bd-564cde3a9c45" executionId="3f50a903-8106-4dcd-b032-1b3e3173c6c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54e7c43a-171b-f420-6d20-9f4bc2e3b1de" executionId="f021cefc-7517-4de1-acf2-6d4c8278a037" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57dad163-f15c-4b88-320e-fb2bab537e8b" executionId="802162f1-ccab-415c-aa06-bab2906e0e12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5904b435-2e19-bcec-1366-5ea36cf3993e" executionId="86480c5e-f5f7-4f54-a62e-a81e754880f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a18b7bc-361b-040b-6eaa-d1c0e78f6279" executionId="6cbd94c7-d0e9-4820-b3fe-b0adc64c70b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ab775b9-4118-ee7a-d65b-b0095acb4c4d" executionId="34e66c07-5647-491c-bc18-109ce8fa639e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bd294c3-cfea-00ed-62f0-c24620691c0f" executionId="7a4de215-1f53-4b24-b2cc-94bbc5d52445" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bf88f68-aff0-b518-65f8-5460a51be064" executionId="afadf9e1-a7e0-4a6a-b5ab-a4d31d41f753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c1e7265-83bf-b533-fb21-b4d5ca620738" executionId="b2aafbb3-ea43-4701-a43c-ef00bd544977" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5cc56040-b76a-8366-4002-46cfacb9f88b" executionId="612a9c41-0e04-49ac-a9f9-852f2d6c1653" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="62f8e71d-ac9b-da09-2065-a6daa987f6db" executionId="0b7ad731-6283-48e9-adb3-e24db5c3f166" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="633df4d2-10a9-6f34-07a5-64a8797c6ca2" executionId="0c24da3d-00b4-45b0-bb0e-c212a45cfe45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67449f0c-0ee7-648b-834c-e9ad41504b7c" executionId="22eb0aea-7a85-497f-8851-53127ed26b26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68ee1d42-8dc1-a4f4-80f5-c07ab4859c9f" executionId="dffd4fbb-825d-4a75-b731-8ed02db15408" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6964924c-05d1-dbad-4f3a-9e7ab1b0e8a1" executionId="0ac8d364-9fe0-4d25-8d93-3a7a570fe787" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ae69f95-30b4-eaff-99c8-64d5d327f66a" executionId="fc03daa7-bcf5-4415-970e-d2d5492cced8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cfb34f3-cf67-fcce-1baa-ebc8434f621a" executionId="dc1f7c5e-cf32-4e2c-8074-0c2c51ee2d27" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6da29a6a-d29a-26b1-7dd7-0fdd1d5a7759" executionId="7c9d5cae-29ff-4020-9b29-e8fbf70789dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6fe13556-2875-4182-2dec-34a05088fc82" executionId="912218a7-5634-41a7-80d8-5746151cf54d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70c07d74-6f1c-4c48-5644-c1d8de7e3b7b" executionId="a2a421ff-2ebe-4921-b92a-40b873c36899" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70d5cf82-f4fd-a904-e439-8fabc681a325" executionId="60caebaa-6654-4d4b-8891-36c17528baa0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71062e61-3ae8-3f1b-9341-76afa9391664" executionId="a85d1561-2aed-4688-a30e-3978f616e886" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72da20f2-142e-0ff3-88b6-35c6b7254699" executionId="a81d23e6-7645-4b13-bb0d-10c014f58be1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72ece11d-c0fb-e647-f1a3-45b88a79e542" executionId="e88d1286-5433-4098-9436-2f7c2628530f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74fc041a-f030-2675-7b09-8d44a6dd98a8" executionId="3ec25629-bdb6-4145-90b8-eba4b70e4ae1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="753d70bb-be76-a905-ef28-b6f386c63ed6" executionId="72490745-19d7-4df4-8f03-b923e0200771" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76829c24-cc92-17a3-54c7-e57804e46d6d" executionId="78ddf3bd-ee4d-47e0-a16a-a30b57584b1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7720a32d-4468-60d4-518c-be6ade616b3f" executionId="56d56fc9-7bf0-49fc-ae4c-4febb01bc92b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="772c0984-e5a3-be5c-4f97-0bf98eb4e1f1" executionId="6c9f0822-a650-4a20-babb-9068c197ff65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78808373-40d6-5f98-dca5-7ea3a22da11c" executionId="bec2f309-56d7-4013-987c-624bb7a1fa38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78f0771b-a47c-78a5-a57f-2f917c847db8" executionId="dde0300c-a93e-4c09-be83-a1774371b486" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="794a9f2e-dadb-de3a-ddef-35aaf7c66beb" executionId="de56d25f-6738-4298-b1b4-9630cdad85d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d3bdd0f-891f-e270-3572-e64070ef3d7d" executionId="f20e3cc9-c81d-40d6-8fb9-8d8c4a8b45a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7df79ab5-7ace-17ec-de4c-7a8e23a8d813" executionId="98c2e301-c637-4776-9636-100f14df7360" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7dfec062-4513-dcee-89e6-5fca85fb96d0" executionId="fcd0d768-0ec8-43a2-90e8-5c84dc8a7b99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e5877b2-242f-0253-e229-d4f2e0ca8889" executionId="6e7a5a70-78b1-41fc-8559-24919f184884" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f4f22f6-66f8-6241-4d21-2df753471ffb" executionId="82e08cd6-8a99-4896-9207-364e05c0c553" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f5a4d3c-3b53-b33b-cece-4d9cfd127a60" executionId="99924d4f-bfbc-4eb6-bc72-0d3ff66d395e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="802c6dbd-6d3c-650b-52f4-8d9e60e1172f" executionId="8f5b01d0-13ec-43c6-9b31-b891ac7da49d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83e4aa55-a113-b029-00fd-1fd47a71a678" executionId="d04181dc-6826-46bd-b54a-33995a6cc077" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="849564e3-0417-8269-e89a-7622011fa6d3" executionId="d4f538a3-689e-4b29-b8d3-270be75b040f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88e29ecc-7226-820d-9dd4-7b7172cc23ae" executionId="8bf61dd4-761f-4c0e-b4a8-2332f1494680" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89686dd6-ef6f-28f9-c33f-67a7e3bfdf42" executionId="0fc4c353-0f89-4fa8-bcce-39eb7567067b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a15324f-18f1-590c-5e12-c65c48d91962" executionId="adfcf65d-0bee-497b-b0e8-554963873483" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="901a8106-e620-0cc3-b9ff-33c393033365" executionId="c0ae158f-0415-49d6-a811-a86174302632" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9060561f-35ae-fe31-72a2-ffb5c8690d4d" executionId="9e4e3569-b3e4-4869-b127-26526a7c13b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="918bbf56-93ef-a46d-db60-ac0625525817" executionId="c9e090c7-1f55-473a-91ad-1e25492726e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93b3b298-35b3-c72d-e7ed-f372281c6941" executionId="d3f1c535-0ecb-433e-b972-37697334343e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="942514c3-c01e-bf4f-4ef5-ba31bb835b5e" executionId="57558827-9554-4523-b16a-0579d33c971b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="949e61c3-7d7c-be8d-9157-25c4f7ff819f" executionId="01ac632c-9558-4535-856b-633b4cc0a97b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="98ed3766-1d5a-b3bf-a72c-cada89a514ee" executionId="4bd59dd4-1de5-437a-b0a0-cde14f9ff4ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99184710-3de1-c7d4-818c-f2ba2522551b" executionId="3ca5b236-3b77-42b7-94ab-0990efcf020f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9be014b3-020f-bf8f-33fd-dae1c97f1ae0" executionId="a4deba5e-325f-404f-b3c1-c3047cec995f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bebaeb1-9206-e380-e60f-f3b97f9382d4" executionId="74259da4-9f01-4d93-b5bd-d13d7b8b4118" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c89f597-df52-942d-68ee-3d7a931b4c43" executionId="02d7443a-ba23-4cce-8841-9f2d8cda45fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d87bc7a-0c76-c5fb-53a5-bb25a5d44672" executionId="271bc23f-d938-45b2-a43d-da8c58c4d732" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a07266ba-5b60-f63e-b1f6-6d8bb37febf9" executionId="67d5bbf4-62e5-4d3b-97f5-df3efa5566ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7b466f3-b0b8-ec7e-a4c2-258f94c96244" executionId="353ec280-68f1-46b5-b4c2-1e32cb1562f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa582909-a333-6920-c690-9f7793ad5b86" executionId="aa22f5d0-3b5f-405d-ba2a-7dae27ed4df1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aadb1ec8-7bce-3611-7252-55dc9eac7d4c" executionId="8454f403-4d04-4fa6-a138-98692219ef13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad90abf8-49c4-ed93-d60a-b113fa04d26f" executionId="abcf7a3f-587e-4197-a21e-568a4030ee82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad986776-9530-256a-a701-5b49f8c704a3" executionId="a0ce5979-22bb-48e7-b0d7-3606d43e2910" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="adff05a7-0f7e-dabb-caa6-b91b39b6cc7b" executionId="83f44704-90d5-44f7-aafb-182657703e22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b72108f6-cb42-1119-316b-bf696ea40c3d" executionId="028b48ad-be74-40c0-9838-d2c6880eebd5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b866fbd2-8aa4-0c63-2595-11ab29a3e586" executionId="f5b6436a-b0cf-4d27-af2a-58d94f8ccf93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9122787-c565-f85f-04fa-406c138ae10a" executionId="3f65e322-667d-4cae-b80a-6e71979aa25f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bba56e8c-c7de-a40a-e256-d2721bd7ce36" executionId="2f4d7c39-993f-428c-9e7f-ea951bfda005" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd34201d-f4d6-1b8b-6e65-4505201b44ae" executionId="8be010be-1118-4ebc-a30e-9b396bbc1cb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="beaca5b9-4d5b-cf84-2fca-3b3ad73419d3" executionId="e1c62756-c508-442f-b8f8-4f0fdbac4589" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf25a094-527a-e4de-26fd-e6bc13571a24" executionId="a85d65ca-924f-49c9-b29e-a1b782da6b13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf543379-04a4-a02b-8d45-d6415372de17" executionId="d098a18c-e1d8-4d1e-a4a1-1e2416542184" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c014d805-2e93-5f2d-b8ae-00a710954321" executionId="e01a883a-3596-4ddb-b5e6-2844d1cb24a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0774163-4740-3786-cd9e-22e121b74125" executionId="2d993d60-05c3-4fc0-a72b-ba5a2ea4f834" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1cad183-8169-5200-ebfd-3c3d95b13a6a" executionId="3c15479e-5ca5-43ac-ab1a-99e02d2ba62a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3ccfe1d-c4b4-9f37-0960-9ad2697c4c0d" executionId="cb0639c9-bbea-4b75-934d-7b494354ea48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3f2bd76-0a8d-69b3-b781-986375cfb603" executionId="e3c2c64c-c5de-493c-b3d2-dd33facbb1c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3f763d9-28f6-2067-89b7-5f6a8d0e3843" executionId="eefab11e-fade-4282-9155-855ed113c565" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5a2ab0b-1853-8e05-6421-92ece8e1baa7" executionId="86879331-5bc1-4ac9-9d4b-3180ed0ff316" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c70a18ef-9246-da0c-496a-a539ee306630" executionId="4ca454ff-da52-43d9-8a04-7998ab1ac38e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb17197f-0154-7523-6635-0ed45555e335" executionId="0e40eedc-0c79-483a-be58-b9aa5033911e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb9a5a97-4d41-ec98-f014-c7ae293c1bfa" executionId="daf0f1f0-9a84-4a0e-b61b-0f576e99861f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc32baca-2626-858f-2354-1fdfc73c00f5" executionId="9b031aec-9f79-406d-8d02-77c66681be8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce0e6eda-1070-1579-b632-edd303fc39c4" executionId="720db399-b6d8-4145-8c11-988bb2bc4569" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3aa65ac-a753-4de0-9a8c-d170f7009390" executionId="8858a409-d4f6-4232-975d-e5dbee787d9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d45d383d-b0e8-35a9-9d25-957bda1ab547" executionId="c53c9b22-0434-4d84-9b59-be70c4b44f1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ef73cf-1f94-c408-005b-936413a6c714" executionId="4dc0451a-28e0-4f37-adbe-97e9c05db941" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d64f49d1-7c69-0455-071b-424f4bab12aa" executionId="0a4aab5b-99a1-4f55-9351-3ca9df6418d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d77ff7e3-5de7-96c2-846f-5560f6f1fc92" executionId="95467ea7-0c4c-4e6d-a5b0-08df8543d149" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbf1ea4e-cd32-6e47-f99f-855986f06976" executionId="e0fb9db9-c12f-4e2c-9e02-bc0107b844a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd3a28f8-36e3-d38f-5430-d99446e2ec93" executionId="382623b7-0716-4d49-a8de-c5ed75fcff59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4db20be-90e9-179b-c19f-4ef2c00bf22a" executionId="3bd43ae7-cad7-4204-acbd-2e29c99d49c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb115a9c-28b6-13ae-0054-4f87878ed931" executionId="012faaee-5b5e-45bc-9323-e8a6d64a5070" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec92ad0b-8559-bd43-9e1e-87fa0e671c77" executionId="f7456941-212d-403d-abc9-e421e7c648b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edefbbf0-6ba6-354f-ebeb-47134e27a2ac" executionId="356f110e-b7a9-48f4-874c-ad0f675d7127" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee1c1495-b6ee-41b5-a0aa-3f83ac036054" executionId="a79b7224-ca4d-47be-9a6e-b2e702c990fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee34faeb-5794-e3cb-90d0-7889ef3a2289" executionId="bfb64d03-921b-4961-91cc-7957c5204c88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="efa922fe-8424-cb0a-8c63-10210e0eae92" executionId="15f2cd82-15ec-487c-86c1-672524f7ca6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2d06b69-1b53-bdfa-5c40-8170c9a0812c" executionId="2a91c9cc-bef7-40a7-8572-b697119271ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f69298a7-5abb-da05-7a04-2b502bb6d9b8" executionId="0a44df79-d5f3-4908-9d4f-6772899f302e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6f5b952-6f59-66de-3925-4733e242b79a" executionId="eae2ddbe-0dba-4cfa-b0b4-79c4b4a4848e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8094fdf-0e77-87a9-d4c2-7fec63b1400d" executionId="c737cfea-81ae-41f3-ba3b-394bbe0d2e9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8762649-4dde-5174-f3b6-4cb3c3013724" executionId="8dcabceb-b470-47cd-bf92-fa6e05c22fd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9316b91-5da1-a00b-2ca8-83f832eb6330" executionId="c401e282-ca23-42ef-b0c1-80bee55ad3e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdcecf0b-35f3-d3b9-d177-940c415b4c00" executionId="668420b6-38c4-4b5f-be71-57f543e9d6d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="feee3ce0-ca18-21c9-fc6b-c58977af3bbe" executionId="8e44983a-0fc8-4b8c-afe5-7749183d52cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="505b5a70-2723-4413-9b60-ff2de77e58d2" testId="0157a136-4bbe-5378-7479-dfce9e4a7048" testName="ReplaceConstant" computerName="JASONB-PC" duration="00:00:00.0492856" startTime="2012-03-11T16:34:01.5306088-05:00" endTime="2012-03-11T16:34:01.9576332-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="505b5a70-2723-4413-9b60-ff2de77e58d2">
    </UnitTestResult>
    <UnitTestResult executionId="ce584080-eca2-4d39-9fcd-de23c1776b3d" testId="041a799d-12e4-80a8-114c-6c26c8a7ea36" testName="CreateViaFuncZeroCountAndVariance" computerName="JASONB-PC" duration="00:00:00.0221426" startTime="2012-03-11T16:34:01.9586332-05:00" endTime="2012-03-11T16:34:01.9846347-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce584080-eca2-4d39-9fcd-de23c1776b3d">
    </UnitTestResult>
    <UnitTestResult executionId="50d4ec74-227e-4765-85bb-3e71c205c0c1" testId="050e5afe-fe5e-ac29-385e-d0e4b90def50" testName="GetNodeCountOfLambda" computerName="JASONB-PC" duration="00:00:00.0025623" startTime="2012-03-11T16:34:01.9866348-05:00" endTime="2012-03-11T16:34:01.9926352-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50d4ec74-227e-4765-85bb-3e71c205c0c1">
    </UnitTestResult>
    <UnitTestResult executionId="2b86c8e6-e5dc-4365-ab2f-8e744511b128" testId="053b0821-25f9-f741-d4a7-ebe0572d625e" testName="ReplaceMultiply" computerName="JASONB-PC" duration="00:00:00.0016731" startTime="2012-03-11T16:34:01.9936352-05:00" endTime="2012-03-11T16:34:01.9986355-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b86c8e6-e5dc-4365-ab2f-8e744511b128">
    </UnitTestResult>
    <UnitTestResult executionId="6d72fb4b-94a0-499e-9c6a-c1e46fb75b1e" testId="065e1c04-54e8-84f8-0e4a-ff671adc3044" testName="IsValidWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0006235" startTime="2012-03-11T16:34:01.9996356-05:00" endTime="2012-03-11T16:34:02.0036358-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d72fb4b-94a0-499e-9c6a-c1e46fb75b1e">
    </UnitTestResult>
    <UnitTestResult executionId="1c067f15-afc3-41ee-9c2a-baad87da31ca" testId="06f7e831-f052-da54-ee25-37a5e26ef6a5" testName="CreateViaNullFuncCountAndVariance" computerName="JASONB-PC" duration="00:00:00.0004657" startTime="2012-03-11T16:34:02.0046359-05:00" endTime="2012-03-11T16:34:02.0086361-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c067f15-afc3-41ee-9c2a-baad87da31ca">
    </UnitTestResult>
    <UnitTestResult executionId="72959fa7-6622-4e37-b34a-fef047bb1dd9" testId="08df9b50-11da-c519-3dd6-b447183bdbfe" testName="CompressWithAddingOfConstantsOnRight" computerName="JASONB-PC" duration="00:00:00.0068986" startTime="2012-03-11T16:34:02.0096362-05:00" endTime="2012-03-11T16:34:02.0186367-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72959fa7-6622-4e37-b34a-fef047bb1dd9">
    </UnitTestResult>
    <UnitTestResult executionId="23eb4280-b2d4-4559-9ddf-e18417b1efd0" testId="0a005ba1-ab3a-037d-7b92-619d37d1e47a" testName="ReplaceAddRightPart" computerName="JASONB-PC" duration="00:00:00.0013767" startTime="2012-03-11T16:34:02.0196367-05:00" endTime="2012-03-11T16:34:02.0236370-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23eb4280-b2d4-4559-9ddf-e18417b1efd0">
    </UnitTestResult>
    <UnitTestResult executionId="8e5cf039-b10d-49a1-89da-1b17f7f2591a" testId="0a1eb028-1383-9344-5f2d-09e986756014" testName="CreateAddOfParameterAndPositiveConstant" computerName="JASONB-PC" duration="00:00:00.2716727" startTime="2012-03-11T16:34:02.0256371-05:00" endTime="2012-03-11T16:34:02.3006528-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e5cf039-b10d-49a1-89da-1b17f7f2591a">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfParameterAndPositiveConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfParameterAndPositiveConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 128
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07915e48-294f-4ecb-9251-9c3f16cfd281" testId="0c4ace6c-7ed9-12e4-0648-085ff7df49c2" testName="CompressWithMultiplyingOfOneOnLeft" computerName="JASONB-PC" duration="00:00:00.0006248" startTime="2012-03-11T16:34:02.3026529-05:00" endTime="2012-03-11T16:34:02.3066531-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07915e48-294f-4ecb-9251-9c3f16cfd281">
    </UnitTestResult>
    <UnitTestResult executionId="47e34a60-826e-4f93-8151-ca837816e079" testId="0e51d482-09cc-d45a-16cf-6d500a8313ba" testName="CompressSimpleExpressionWithUnnecessarySubtractionOfZeros" computerName="JASONB-PC" duration="00:00:00.0008231" startTime="2012-03-11T16:34:02.3076532-05:00" endTime="2012-03-11T16:34:02.3126535-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47e34a60-826e-4f93-8151-ca837816e079">
    </UnitTestResult>
    <UnitTestResult executionId="78f81cff-092f-4645-ac50-3a852d539a73" testId="0fdfbfd2-3ed8-18f2-9ce7-7f0e779f8148" testName="ReplaceParameterInSubtractOnRight" computerName="JASONB-PC" duration="00:00:00.0034894" startTime="2012-03-11T16:34:02.3166537-05:00" endTime="2012-03-11T16:34:02.3226541-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78f81cff-092f-4645-ac50-3a852d539a73">
    </UnitTestResult>
    <UnitTestResult executionId="7ab949ba-fff3-4aa3-8de4-efb8765c4fe8" testId="1207f596-2127-86f6-4663-bd1a56aa43e2" testName="CheckMutationProbabilityOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0054660" startTime="2012-03-11T16:34:02.3246542-05:00" endTime="2012-03-11T16:34:02.3326546-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ab949ba-fff3-4aa3-8de4-efb8765c4fe8">
    </UnitTestResult>
    <UnitTestResult executionId="37c36f13-b406-4c5f-afaa-311fca428576" testId="1320ac90-961c-51d3-614d-725eebb09f8c" testName="EvaluateFitnessWithExceptionAndResultExpectationIsException" computerName="JASONB-PC" duration="00:00:00.0064540" startTime="2012-03-11T16:34:02.3336547-05:00" endTime="2012-03-11T16:34:02.3436553-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37c36f13-b406-4c5f-afaa-311fca428576">
    </UnitTestResult>
    <UnitTestResult executionId="94a9ada4-1797-402e-8333-2d882d94beb6" testId="143a9f37-3324-4630-72c9-d713490ce99c" testName="ReplaceDivideLeftPart" computerName="JASONB-PC" duration="00:00:00.0008507" startTime="2012-03-11T16:34:02.3456554-05:00" endTime="2012-03-11T16:34:02.3496556-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94a9ada4-1797-402e-8333-2d882d94beb6">
    </UnitTestResult>
    <UnitTestResult executionId="00e27aae-1f19-40fa-8d0e-438e7da21ee5" testId="145ff47c-de52-9171-ed8a-b6592f3fb4d6" testName="ReplacePowerRightPart" computerName="JASONB-PC" duration="00:00:00.0010123" startTime="2012-03-11T16:34:02.3506557-05:00" endTime="2012-03-11T16:34:02.3556559-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00e27aae-1f19-40fa-8d0e-438e7da21ee5">
    </UnitTestResult>
    <UnitTestResult executionId="b14fb438-0270-42e4-bcae-0d8cf153b617" testId="15e24d22-6af1-3d63-2c4d-6f45796ad421" testName="Create" computerName="JASONB-PC" duration="00:00:00.0246922" startTime="2012-03-11T16:34:02.3566560-05:00" endTime="2012-03-11T16:34:02.6516729-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b14fb438-0270-42e4-bcae-0d8cf153b617">
    </UnitTestResult>
    <UnitTestResult executionId="fe99755c-29b9-4f9a-bc00-2b2a4a4bb735" testId="1794289f-f6e3-0f83-295c-a4139fb8fa2c" testName="ReplaceAdd" computerName="JASONB-PC" duration="00:00:00.0008109" startTime="2012-03-11T16:34:02.6526729-05:00" endTime="2012-03-11T16:34:02.6566732-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe99755c-29b9-4f9a-bc00-2b2a4a4bb735">
    </UnitTestResult>
    <UnitTestResult executionId="509f6a79-0989-4ccd-a672-6ee6c8f17248" testId="19702ce4-7ac3-c622-d87f-0e20b860a280" testName="RunWhenSolutionIsNullAndNumberOfGenerationRunsIsZero" computerName="JASONB-PC" duration="00:00:00.2170878" startTime="2012-03-11T16:34:02.6586733-05:00" endTime="2012-03-11T16:34:02.8796859-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="509f6a79-0989-4ccd-a672-6ee6c8f17248">
    </UnitTestResult>
    <UnitTestResult executionId="e9e2e4ad-39f3-4232-aac8-5784dc65894f" testId="1ccba777-b05e-b0ae-2be9-56919cb0c37d" testName="CreateForUnsupportedOperation" computerName="JASONB-PC" duration="00:00:00.0023705" startTime="2012-03-11T16:34:02.8806860-05:00" endTime="2012-03-11T16:34:02.8866863-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9e2e4ad-39f3-4232-aac8-5784dc65894f">
    </UnitTestResult>
    <UnitTestResult executionId="848862d1-959b-4cb1-95f5-b3dd3ae0de4f" testId="1d1fd183-cd75-e8eb-862a-d510bede7ea1" testName="CreateViaNullFunc" computerName="JASONB-PC" duration="00:00:00.0005228" startTime="2012-03-11T16:34:02.8876864-05:00" endTime="2012-03-11T16:34:02.8916866-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="848862d1-959b-4cb1-95f5-b3dd3ae0de4f">
    </UnitTestResult>
    <UnitTestResult executionId="acb69e8d-ab7e-431f-9811-31c8eefcee5f" testId="1dc99201-9e6c-44cf-eb1d-932de7410663" testName="CreateWithNullParameters" computerName="JASONB-PC" duration="00:00:00.0025957" startTime="2012-03-11T16:34:02.8926867-05:00" endTime="2012-03-11T16:34:02.8986870-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acb69e8d-ab7e-431f-9811-31c8eefcee5f">
    </UnitTestResult>
    <UnitTestResult executionId="cb527ee0-73f1-4eba-be89-8991e00b91a9" testId="1f4025ba-4998-4dab-974e-3adbc9d7adfc" testName="ReplaceParameterInAddOnRight" computerName="JASONB-PC" duration="00:00:00.0008975" startTime="2012-03-11T16:34:02.8996871-05:00" endTime="2012-03-11T16:34:02.9036873-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb527ee0-73f1-4eba-be89-8991e00b91a9">
    </UnitTestResult>
    <UnitTestResult executionId="43690d14-3322-4ee5-9e6a-5ef8d05a01f3" testId="2006d7a3-3bc7-bea9-2c55-c3e6f5f4392c" testName="CreateDivideOfParameterAndNegativeConstant" computerName="JASONB-PC" duration="00:00:00.0023801" startTime="2012-03-11T16:34:02.9056874-05:00" endTime="2012-03-11T16:34:02.9116877-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43690d14-3322-4ee5-9e6a-5ef8d05a01f3">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfParameterAndNegativeConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfParameterAndNegativeConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 205
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51617cc7-0580-4a0d-9711-58e186fb6e06" testId="2062b40d-5857-83a6-e5a8-c21b301a446f" testName="CompressWithAddingOfConstantsOnLeft" computerName="JASONB-PC" duration="00:00:00.0007878" startTime="2012-03-11T16:34:02.9116877-05:00" endTime="2012-03-11T16:34:02.9166880-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51617cc7-0580-4a0d-9711-58e186fb6e06">
    </UnitTestResult>
    <UnitTestResult executionId="31aa3080-4b6d-4ceb-af2f-a76e19934f75" testId="21b708f7-fcae-30fc-3af8-e3b2fa3ff076" testName="EvaluateFitness" computerName="JASONB-PC" duration="00:00:00.0318500" startTime="2012-03-11T16:34:02.9186881-05:00" endTime="2012-03-11T16:34:02.9536901-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31aa3080-4b6d-4ceb-af2f-a76e19934f75">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;0&gt;. Actual:&lt;-4.9999999999989E-08&gt;. </Message>
          <StackTrace>   at ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests.EvaluateFitness() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests.cs:line 21
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ad9467e-ef77-47f2-848a-493222923394" testId="227b5219-c338-c4e1-2be0-82d8d2bf1f79" testName="MutateWithNoMutation" computerName="JASONB-PC" duration="00:00:00.0082305" startTime="2012-03-11T16:34:02.9546902-05:00" endTime="2012-03-11T16:34:02.9666909-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ad9467e-ef77-47f2-848a-493222923394">
    </UnitTestResult>
    <UnitTestResult executionId="0aeca6b3-4108-4514-a9a0-807c36dfa124" testId="29b5739f-b636-b53f-9dc3-55325176d361" testName="Create" computerName="JASONB-PC" duration="00:00:00.0031923" startTime="2012-03-11T16:34:02.9676909-05:00" endTime="2012-03-11T16:34:02.9736913-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0aeca6b3-4108-4514-a9a0-807c36dfa124">
    </UnitTestResult>
    <UnitTestResult executionId="5b6a6949-c5d2-4df5-b84d-6a58bc2c15af" testId="29e73d84-a96e-0e71-40f4-5cb8b21dab4d" testName="CreateWithFuncThrowingArithmeticException" computerName="JASONB-PC" duration="00:00:00.0010194" startTime="2012-03-11T16:34:02.9756914-05:00" endTime="2012-03-11T16:34:02.9796916-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b6a6949-c5d2-4df5-b84d-6a58bc2c15af">
    </UnitTestResult>
    <UnitTestResult executionId="eb10cc7e-e5d4-4932-8353-97277c067e03" testId="2a204cb5-d714-0fcb-fadf-2bd6cce71309" testName="CreateWithException" computerName="JASONB-PC" duration="00:00:00.0010701" startTime="2012-03-11T16:34:02.9806917-05:00" endTime="2012-03-11T16:34:02.9856920-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb10cc7e-e5d4-4932-8353-97277c067e03">
    </UnitTestResult>
    <UnitTestResult executionId="bae3827c-13d8-4ba6-a3eb-6c6a36db27ba" testId="2bd22e7d-67dd-5712-54d0-c103ac961a51" testName="Crossover" computerName="JASONB-PC" duration="00:00:00.0077416" startTime="2012-03-11T16:34:02.9876921-05:00" endTime="2012-03-11T16:34:02.9986927-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bae3827c-13d8-4ba6-a3eb-6c6a36db27ba">
    </UnitTestResult>
    <UnitTestResult executionId="9e71e220-eba9-48ce-9618-6ffd89fe188b" testId="2d763704-248a-e16b-61d3-fc92f2a7e477" testName="SelectFittestChildrenWhenPopulationIsTooSmall" computerName="JASONB-PC" duration="00:00:00.0091113" startTime="2012-03-11T16:34:03.0006928-05:00" endTime="2012-03-11T16:34:03.0126935-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e71e220-eba9-48ce-9618-6ffd89fe188b">
    </UnitTestResult>
    <UnitTestResult executionId="31f32aa6-0efe-4127-ba23-b26d1960cd10" testId="2d9815e2-8df5-f6eb-f115-253c142fe8f0" testName="CreateViaResults" computerName="JASONB-PC" duration="00:00:00.0004895" startTime="2012-03-11T16:34:03.0136936-05:00" endTime="2012-03-11T16:34:03.0176938-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31f32aa6-0efe-4127-ba23-b26d1960cd10">
    </UnitTestResult>
    <UnitTestResult executionId="8bc56cb9-3aeb-4959-9ab6-8d8808c68296" testId="308480eb-dfbc-044e-7ad0-3633ede97af4" testName="CompressWithUnsupportedBinaryExpressionAndBothConstants" computerName="JASONB-PC" duration="00:00:00.0006319" startTime="2012-03-11T16:34:03.0186939-05:00" endTime="2012-03-11T16:34:03.0226941-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bc56cb9-3aeb-4959-9ab6-8d8808c68296">
    </UnitTestResult>
    <UnitTestResult executionId="f6ed61fe-58cd-4f7c-80db-af48bea9b7e4" testId="3088d711-edcf-8dce-5aa7-fac6385a2d6e" testName="CreateSubtractOfParameterAndNegativeConstant" computerName="JASONB-PC" duration="00:00:00.0024821" startTime="2012-03-11T16:34:03.0236942-05:00" endTime="2012-03-11T16:34:03.0296945-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6ed61fe-58cd-4f7c-80db-af48bea9b7e4">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfParameterAndNegativeConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfParameterAndNegativeConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 149
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ecae7077-c947-4556-9c0a-d63db409e3ee" testId="30ae8f16-4327-5e86-d02e-08a0a4d67bfc" testName="EvaluateFitnessOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0015346" startTime="2012-03-11T16:34:03.0306946-05:00" endTime="2012-03-11T16:34:03.0366949-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ecae7077-c947-4556-9c0a-d63db409e3ee">
    </UnitTestResult>
    <UnitTestResult executionId="828353ee-02c1-483c-b9ea-a1468f06f1b4" testId="31c0f085-7e90-61c9-6c1f-4e0d001ce21a" testName="CompressWithSubtractingOfParameters" computerName="JASONB-PC" duration="00:00:00.0005549" startTime="2012-03-11T16:34:03.0376950-05:00" endTime="2012-03-11T16:34:03.0416952-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="828353ee-02c1-483c-b9ea-a1468f06f1b4">
    </UnitTestResult>
    <UnitTestResult executionId="4a9bb2a0-866c-44d3-bec0-8169beb57c85" testId="31c847fb-b546-0474-03c5-f501dfd166e2" testName="ReplaceDivideRightPart" computerName="JASONB-PC" duration="00:00:00.0007936" startTime="2012-03-11T16:34:03.0436953-05:00" endTime="2012-03-11T16:34:03.0476955-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a9bb2a0-866c-44d3-bec0-8169beb57c85">
    </UnitTestResult>
    <UnitTestResult executionId="09f8319a-95ee-4a18-a9e9-b1f956333a80" testId="35243396-0749-8454-bfd6-04330f5a1e56" testName="ReplaceSubtractRightPart" computerName="JASONB-PC" duration="00:00:00.0007063" startTime="2012-03-11T16:34:03.0486956-05:00" endTime="2012-03-11T16:34:03.0526958-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09f8319a-95ee-4a18-a9e9-b1f956333a80">
    </UnitTestResult>
    <UnitTestResult executionId="277115ab-d4df-4c8f-bf19-61a5755550a4" testId="35f73dc4-f4ca-dc1d-53a8-c6464931d223" testName="ReplaceMultiplyRightPart" computerName="JASONB-PC" duration="00:00:00.0009495" startTime="2012-03-11T16:34:03.0536959-05:00" endTime="2012-03-11T16:34:03.0586962-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="277115ab-d4df-4c8f-bf19-61a5755550a4">
    </UnitTestResult>
    <UnitTestResult executionId="758bb62f-7909-46f1-8d6f-f845796ad67a" testId="3c02a3fa-67e0-4644-c8f0-1e23de818dff" testName="ReplaceParameterInPowerOnRight" computerName="JASONB-PC" duration="00:00:00.0010720" startTime="2012-03-11T16:34:03.0596962-05:00" endTime="2012-03-11T16:34:03.0646965-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="758bb62f-7909-46f1-8d6f-f845796ad67a">
    </UnitTestResult>
    <UnitTestResult executionId="42b7c219-10f3-4248-917e-9e1e535cb865" testId="3dfc0b52-6f63-b555-83e6-96089165101a" testName="ReplaceParameterInMultiplyOnLeft" computerName="JASONB-PC" duration="00:00:00.0008616" startTime="2012-03-11T16:34:03.0656966-05:00" endTime="2012-03-11T16:34:03.0706968-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42b7c219-10f3-4248-917e-9e1e535cb865">
    </UnitTestResult>
    <UnitTestResult executionId="f3078060-8be3-4d3b-98ad-f0511fa72330" testId="3e4dfb93-5301-52b0-9bed-c5f315444730" testName="CompressWithPowerOfConstantsOnRight" computerName="JASONB-PC" duration="00:00:00.0005844" startTime="2012-03-11T16:34:03.0716969-05:00" endTime="2012-03-11T16:34:03.0756971-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3078060-8be3-4d3b-98ad-f0511fa72330">
    </UnitTestResult>
    <UnitTestResult executionId="37d58304-f16d-457e-8baf-32c7b8ec1e63" testId="3ea9eb35-b2df-ceaf-ddab-cd74ffd89565" testName="CheckNumberOfGenerationsOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014486" startTime="2012-03-11T16:34:03.0766972-05:00" endTime="2012-03-11T16:34:03.0816975-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37d58304-f16d-457e-8baf-32c7b8ec1e63">
    </UnitTestResult>
    <UnitTestResult executionId="6489b840-ab7e-4ada-9b06-16efafeef545" testId="3ec17789-7699-9190-0695-6a4a2a517256" testName="CompressWithSubtractingOfConstantsOnRight" computerName="JASONB-PC" duration="00:00:00.0006178" startTime="2012-03-11T16:34:03.0826975-05:00" endTime="2012-03-11T16:34:03.0866978-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6489b840-ab7e-4ada-9b06-16efafeef545">
    </UnitTestResult>
    <UnitTestResult executionId="05a49135-568c-4760-a453-03959877395d" testId="3fde86df-ebe5-6150-f697-58c3c1018860" testName="GetNodeWithParameterAsTarget" computerName="JASONB-PC" duration="00:00:00.0004888" startTime="2012-03-11T16:34:03.0876978-05:00" endTime="2012-03-11T16:34:03.0916980-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05a49135-568c-4760-a453-03959877395d">
    </UnitTestResult>
    <UnitTestResult executionId="f68aee58-9011-4200-b71f-f28fbad341c3" testId="422c856a-2f20-9839-4fc9-5c7697e83323" testName="CheckProperties" computerName="JASONB-PC" duration="00:00:00.0021723" startTime="2012-03-11T16:34:03.0926981-05:00" endTime="2012-03-11T16:34:03.0986984-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f68aee58-9011-4200-b71f-f28fbad341c3">
    </UnitTestResult>
    <UnitTestResult executionId="df56476e-5bac-4158-af49-3b2dbd14d28b" testId="433c0367-98dc-badc-0cf7-8e4f6b1d46a9" testName="CompressWithAddingOfZeroOnLeft" computerName="JASONB-PC" duration="00:00:00.0005555" startTime="2012-03-11T16:34:03.0996985-05:00" endTime="2012-03-11T16:34:03.1036987-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df56476e-5bac-4158-af49-3b2dbd14d28b">
    </UnitTestResult>
    <UnitTestResult executionId="affa87af-0e05-4b65-bbdd-024170a6d64b" testId="4592dc73-1999-6d44-649d-bf8a50b592d8" testName="CreateWhenPopulationIsNull" computerName="JASONB-PC" duration="00:00:00.0004567" startTime="2012-03-11T16:34:03.1046988-05:00" endTime="2012-03-11T16:34:03.1086990-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="affa87af-0e05-4b65-bbdd-024170a6d64b">
    </UnitTestResult>
    <UnitTestResult executionId="19c94860-b9fd-4475-a055-f538ab4512d5" testId="47de5929-a17f-e0af-9cc0-d490622ae800" testName="CreateSquareRootOfParameter" computerName="JASONB-PC" duration="00:00:00.0038108" startTime="2012-03-11T16:34:03.1096991-05:00" endTime="2012-03-11T16:34:03.1166995-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19c94860-b9fd-4475-a055-f538ab4512d5">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;(a ^ 0.5)&gt;. Actual:&lt;(a ^ a)&gt;. </Message>
          <StackTrace>   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSquareRootOfParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 229
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82dd79fd-7cd7-4592-b7a4-b1a6a1cd4046" testId="48ac608d-f7e1-0a3d-7a3f-abf76ba3be0d" testName="CreateMultiplyOfPositiveConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0026367" startTime="2012-03-11T16:34:03.1176995-05:00" endTime="2012-03-11T16:34:03.1236999-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82dd79fd-7cd7-4592-b7a4-b1a6a1cd4046">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfPositiveConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfPositiveConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 170
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca4cce48-f293-49e0-82a1-0e982103ddd1" testId="48e95875-2a98-b591-f96f-8113bb06edac" testName="CreateViaFuncAndRandom" computerName="JASONB-PC" duration="00:00:00.0013831" startTime="2012-03-11T16:34:03.1246999-05:00" endTime="2012-03-11T16:34:03.1297002-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca4cce48-f293-49e0-82a1-0e982103ddd1">
    </UnitTestResult>
    <UnitTestResult executionId="d809e0ab-7c76-4681-addd-29e723bcba49" testId="4b7718e1-b38d-1d37-dec4-222a79c50897" testName="CompressWithNestedPowers" computerName="JASONB-PC" duration="00:00:00.0006980" startTime="2012-03-11T16:34:03.1307003-05:00" endTime="2012-03-11T16:34:03.1347005-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d809e0ab-7c76-4681-addd-29e723bcba49">
    </UnitTestResult>
    <UnitTestResult executionId="72dd9446-6c12-4e57-b9bd-aa054942737d" testId="4da37189-3a4c-8260-d5ac-643c82a07d23" testName="CreateSubtractOfPositiveConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0024680" startTime="2012-03-11T16:34:03.1367006-05:00" endTime="2012-03-11T16:34:03.1427010-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72dd9446-6c12-4e57-b9bd-aa054942737d">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfPositiveConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfPositiveConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 142
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f50a903-8106-4dcd-b032-1b3e3173c6c5" testId="5219aee5-5266-a0b7-43bd-564cde3a9c45" testName="CreateWithNullParameter" computerName="JASONB-PC" duration="00:00:00.0013838" startTime="2012-03-11T16:34:03.1437010-05:00" endTime="2012-03-11T16:34:03.1817032-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f50a903-8106-4dcd-b032-1b3e3173c6c5">
    </UnitTestResult>
    <UnitTestResult executionId="f021cefc-7517-4de1-acf2-6d4c8278a037" testId="54e7c43a-171b-f420-6d20-9f4bc2e3b1de" testName="EvaluateFitnessWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0014492" startTime="2012-03-11T16:34:03.1837033-05:00" endTime="2012-03-11T16:34:03.1887036-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f021cefc-7517-4de1-acf2-6d4c8278a037">
    </UnitTestResult>
    <UnitTestResult executionId="802162f1-ccab-415c-aa06-bab2906e0e12" testId="57dad163-f15c-4b88-320e-fb2bab537e8b" testName="MutateWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0014742" startTime="2012-03-11T16:34:03.1907037-05:00" endTime="2012-03-11T16:34:03.1957040-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="802162f1-ccab-415c-aa06-bab2906e0e12">
    </UnitTestResult>
    <UnitTestResult executionId="86480c5e-f5f7-4f54-a62e-a81e754880f2" testId="5904b435-2e19-bcec-1366-5ea36cf3993e" testName="CompressWithAddingOfZeroOnRight" computerName="JASONB-PC" duration="00:00:00.0005812" startTime="2012-03-11T16:34:03.1977041-05:00" endTime="2012-03-11T16:34:03.2017043-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86480c5e-f5f7-4f54-a62e-a81e754880f2">
    </UnitTestResult>
    <UnitTestResult executionId="6cbd94c7-d0e9-4820-b3fe-b0adc64c70b8" testId="5a18b7bc-361b-040b-6eaa-d1c0e78f6279" testName="CompressWithAddingOfParameters" computerName="JASONB-PC" duration="00:00:00.0004895" startTime="2012-03-11T16:34:03.2027044-05:00" endTime="2012-03-11T16:34:03.2067046-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cbd94c7-d0e9-4820-b3fe-b0adc64c70b8">
    </UnitTestResult>
    <UnitTestResult executionId="34e66c07-5647-491c-bc18-109ce8fa639e" testId="5ab775b9-4118-ee7a-d65b-b0095acb4c4d" testName="GeneratePopulation" computerName="JASONB-PC" duration="00:00:00.3436174" startTime="2012-03-11T16:34:03.2077047-05:00" endTime="2012-03-11T16:34:03.5547245-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34e66c07-5647-491c-bc18-109ce8fa639e">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;0&gt;. Actual:&lt;-4.9999999999989E-08&gt;. </Message>
          <StackTrace>   at ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersGeneratePopulationTests.GeneratePopulation() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\ExpressionEvolverGeneticAlgorithmParametersGeneratePopulationTests.cs:line 32
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a4de215-1f53-4b24-b2cc-94bbc5d52445" testId="5bd294c3-cfea-00ed-62f0-c24620691c0f" testName="IsValid" computerName="JASONB-PC" duration="00:00:00.0004644" startTime="2012-03-11T16:34:03.5557246-05:00" endTime="2012-03-11T16:34:03.5597248-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a4de215-1f53-4b24-b2cc-94bbc5d52445">
    </UnitTestResult>
    <UnitTestResult executionId="afadf9e1-a7e0-4a6a-b5ab-a4d31d41f753" testId="5bf88f68-aff0-b518-65f8-5460a51be064" testName="CompressWithMultiplyingOfConstantsOnLeft" computerName="JASONB-PC" duration="00:00:00.0005838" startTime="2012-03-11T16:34:03.5617249-05:00" endTime="2012-03-11T16:34:03.5647251-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="afadf9e1-a7e0-4a6a-b5ab-a4d31d41f753">
    </UnitTestResult>
    <UnitTestResult executionId="b2aafbb3-ea43-4701-a43c-ef00bd544977" testId="5c1e7265-83bf-b533-fb21-b4d5ca620738" testName="RunWhenNumberOfGenerationsIsZeroAndGenerationEventIsSetAndSolutionIsAlwaysNull" computerName="JASONB-PC" duration="00:00:00.0091152" startTime="2012-03-11T16:34:03.5667252-05:00" endTime="2012-03-11T16:34:03.5787259-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b2aafbb3-ea43-4701-a43c-ef00bd544977">
    </UnitTestResult>
    <UnitTestResult executionId="612a9c41-0e04-49ac-a9f9-852f2d6c1653" testId="5cc56040-b76a-8366-4002-46cfacb9f88b" testName="CompressWithDivideSameDividentAndDivisor" computerName="JASONB-PC" duration="00:00:00.0006691" startTime="2012-03-11T16:34:03.5797260-05:00" endTime="2012-03-11T16:34:03.5847262-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="612a9c41-0e04-49ac-a9f9-852f2d6c1653">
    </UnitTestResult>
    <UnitTestResult executionId="0b7ad731-6283-48e9-adb3-e24db5c3f166" testId="62f8e71d-ac9b-da09-2065-a6daa987f6db" testName="GetNodeWithConstantAsTarget" computerName="JASONB-PC" duration="00:00:00.0004734" startTime="2012-03-11T16:34:03.5857263-05:00" endTime="2012-03-11T16:34:03.5887265-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b7ad731-6283-48e9-adb3-e24db5c3f166">
    </UnitTestResult>
    <UnitTestResult executionId="0c24da3d-00b4-45b0-bb0e-c212a45cfe45" testId="633df4d2-10a9-6f34-07a5-64a8797c6ca2" testName="CreateDivideOfParameterAndPositiveConstant" computerName="JASONB-PC" duration="00:00:00.0021049" startTime="2012-03-11T16:34:03.5897265-05:00" endTime="2012-03-11T16:34:03.5947268-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c24da3d-00b4-45b0-bb0e-c212a45cfe45">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfParameterAndPositiveConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfParameterAndPositiveConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 212
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22eb0aea-7a85-497f-8851-53127ed26b26" testId="67449f0c-0ee7-648b-834c-e9ad41504b7c" testName="Run" computerName="JASONB-PC" duration="00:00:00.0015435" startTime="2012-03-11T16:34:03.5967269-05:00" endTime="2012-03-11T16:34:03.6017272-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22eb0aea-7a85-497f-8851-53127ed26b26">
    </UnitTestResult>
    <UnitTestResult executionId="dffd4fbb-825d-4a75-b731-8ed02db15408" testId="68ee1d42-8dc1-a4f4-80f5-c07ab4859c9f" testName="EvaluateFitnessWhenResultIsNaN" computerName="JASONB-PC" duration="00:00:00.0022512" startTime="2012-03-11T16:34:03.6027273-05:00" endTime="2012-03-11T16:34:03.6087276-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dffd4fbb-825d-4a75-b731-8ed02db15408">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;-1&gt;. Actual:&lt;-1.00000005&gt;. </Message>
          <StackTrace>   at ExpressionEvolver.Tests.ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests.EvaluateFitnessWhenResultIsNaN() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\ExpressionEvolverGeneticAlgorithmParametersFitnessEvaluatorTests.cs:line 35
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ac8d364-9fe0-4d25-8d93-3a7a570fe787" testId="6964924c-05d1-dbad-4f3a-9e7ab1b0e8a1" testName="CreateViaFuncCountVarianceAndRandom" computerName="JASONB-PC" duration="00:00:00.0028639" startTime="2012-03-11T16:34:03.6097277-05:00" endTime="2012-03-11T16:34:03.6157280-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ac8d364-9fe0-4d25-8d93-3a7a570fe787">
    </UnitTestResult>
    <UnitTestResult executionId="fc03daa7-bcf5-4415-970e-d2d5492cced8" testId="6ae69f95-30b4-eaff-99c8-64d5d327f66a" testName="ReplaceParameterInMultiplyOnRight" computerName="JASONB-PC" duration="00:00:00.0006460" startTime="2012-03-11T16:34:03.6247285-05:00" endTime="2012-03-11T16:34:03.6287288-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc03daa7-bcf5-4415-970e-d2d5492cced8">
    </UnitTestResult>
    <UnitTestResult executionId="dc1f7c5e-cf32-4e2c-8074-0c2c51ee2d27" testId="6cfb34f3-cf67-fcce-1baa-ebc8434f621a" testName="RunOneGenerationWithSuccessfulTerminationAndNoCrossover" computerName="JASONB-PC" duration="00:00:00.0342417" startTime="2012-03-11T16:34:03.6297288-05:00" endTime="2012-03-11T16:34:03.6677310-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc1f7c5e-cf32-4e2c-8074-0c2c51ee2d27">
    </UnitTestResult>
    <UnitTestResult executionId="7c9d5cae-29ff-4020-9b29-e8fbf70789dc" testId="6da29a6a-d29a-26b1-7dd7-0fdd1d5a7759" testName="CreateViaNullResults" computerName="JASONB-PC" duration="00:00:00.0007281" startTime="2012-03-11T16:34:03.6687310-05:00" endTime="2012-03-11T16:34:03.6727313-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c9d5cae-29ff-4020-9b29-e8fbf70789dc">
    </UnitTestResult>
    <UnitTestResult executionId="912218a7-5634-41a7-80d8-5746151cf54d" testId="6fe13556-2875-4182-2dec-34a05088fc82" testName="CompressWithPowerOfConstantsOnLeft" computerName="JASONB-PC" duration="00:00:00.0006473" startTime="2012-03-11T16:34:03.6737313-05:00" endTime="2012-03-11T16:34:03.6777316-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="912218a7-5634-41a7-80d8-5746151cf54d">
    </UnitTestResult>
    <UnitTestResult executionId="a2a421ff-2ebe-4921-b92a-40b873c36899" testId="70c07d74-6f1c-4c48-5644-c1d8de7e3b7b" testName="CreateMultiplyOfParameterAndPositiveConstant" computerName="JASONB-PC" duration="00:00:00.0026990" startTime="2012-03-11T16:34:03.6787316-05:00" endTime="2012-03-11T16:34:03.6847320-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2a421ff-2ebe-4921-b92a-40b873c36899">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfParameterAndPositiveConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfParameterAndPositiveConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 184
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="60caebaa-6654-4d4b-8891-36c17528baa0" testId="70d5cf82-f4fd-a904-e439-8fabc681a325" testName="TerminatorOnNullArgument" computerName="JASONB-PC" duration="00:00:00.0020895" startTime="2012-03-11T16:34:03.6857320-05:00" endTime="2012-03-11T16:34:03.6917324-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60caebaa-6654-4d4b-8891-36c17528baa0">
    </UnitTestResult>
    <UnitTestResult executionId="a85d1561-2aed-4688-a30e-3978f616e886" testId="71062e61-3ae8-3f1b-9341-76afa9391664" testName="ReplaceParameterInSubtractOnLeft" computerName="JASONB-PC" duration="00:00:00.0006274" startTime="2012-03-11T16:34:03.6927324-05:00" endTime="2012-03-11T16:34:03.6957326-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a85d1561-2aed-4688-a30e-3978f616e886">
    </UnitTestResult>
    <UnitTestResult executionId="a81d23e6-7645-4b13-bb0d-10c014f58be1" testId="72da20f2-142e-0ff3-88b6-35c6b7254699" testName="CreateAddOfPositiveConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0028748" startTime="2012-03-11T16:34:03.6967326-05:00" endTime="2012-03-11T16:34:03.7037330-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a81d23e6-7645-4b13-bb0d-10c014f58be1">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfPositiveConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfPositiveConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 114
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e88d1286-5433-4098-9436-2f7c2628530f" testId="72ece11d-c0fb-e647-f1a3-45b88a79e542" testName="ReplaceParameterInDivideOnRight" computerName="JASONB-PC" duration="00:00:00.0008526" startTime="2012-03-11T16:34:03.7047331-05:00" endTime="2012-03-11T16:34:03.7087333-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e88d1286-5433-4098-9436-2f7c2628530f">
    </UnitTestResult>
    <UnitTestResult executionId="3ec25629-bdb6-4145-90b8-eba4b70e4ae1" testId="74fc041a-f030-2675-7b09-8d44a6dd98a8" testName="CopyOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014281" startTime="2012-03-11T16:34:03.7107334-05:00" endTime="2012-03-11T16:34:03.7147337-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ec25629-bdb6-4145-90b8-eba4b70e4ae1">
    </UnitTestResult>
    <UnitTestResult executionId="72490745-19d7-4df4-8f03-b923e0200771" testId="753d70bb-be76-a905-ef28-b6f386c63ed6" testName="CompressWithMultiplyingOfOneOnRight" computerName="JASONB-PC" duration="00:00:00.0004182" startTime="2012-03-11T16:34:03.7157337-05:00" endTime="2012-03-11T16:34:03.7197340-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72490745-19d7-4df4-8f03-b923e0200771">
    </UnitTestResult>
    <UnitTestResult executionId="78ddf3bd-ee4d-47e0-a16a-a30b57584b1a" testId="76829c24-cc92-17a3-54c7-e57804e46d6d" testName="ReplaceAddLeftPart" computerName="JASONB-PC" duration="00:00:00.0007159" startTime="2012-03-11T16:34:03.7207340-05:00" endTime="2012-03-11T16:34:03.7247343-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78ddf3bd-ee4d-47e0-a16a-a30b57584b1a">
    </UnitTestResult>
    <UnitTestResult executionId="56d56fc9-7bf0-49fc-ae4c-4febb01bc92b" testId="7720a32d-4468-60d4-518c-be6ade616b3f" testName="ReplaceMultiplyLeftPart" computerName="JASONB-PC" duration="00:00:00.0007891" startTime="2012-03-11T16:34:03.7257343-05:00" endTime="2012-03-11T16:34:03.7297345-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56d56fc9-7bf0-49fc-ae4c-4febb01bc92b">
    </UnitTestResult>
    <UnitTestResult executionId="6c9f0822-a650-4a20-babb-9068c197ff65" testId="772c0984-e5a3-be5c-4f97-0bf98eb4e1f1" testName="CompressWithSubtractingOfZeroOnRight" computerName="JASONB-PC" duration="00:00:00.0003676" startTime="2012-03-11T16:34:03.7307346-05:00" endTime="2012-03-11T16:34:03.7347348-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c9f0822-a650-4a20-babb-9068c197ff65">
    </UnitTestResult>
    <UnitTestResult executionId="bec2f309-56d7-4013-987c-624bb7a1fa38" testId="78808373-40d6-5f98-dca5-7ea3a22da11c" testName="IsValidWithInfinity" computerName="JASONB-PC" duration="00:00:00.0002848" startTime="2012-03-11T16:34:03.7357349-05:00" endTime="2012-03-11T16:34:03.7387351-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bec2f309-56d7-4013-987c-624bb7a1fa38">
    </UnitTestResult>
    <UnitTestResult executionId="dde0300c-a93e-4c09-be83-a1774371b486" testId="78f0771b-a47c-78a5-a57f-2f917c847db8" testName="CreateWithFuncReturnNaNAndInfinity" computerName="JASONB-PC" duration="00:00:00.0010996" startTime="2012-03-11T16:34:03.7397351-05:00" endTime="2012-03-11T16:34:03.7437353-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dde0300c-a93e-4c09-be83-a1774371b486">
    </UnitTestResult>
    <UnitTestResult executionId="de56d25f-6738-4298-b1b4-9630cdad85d6" testId="794a9f2e-dadb-de3a-ddef-35aaf7c66beb" testName="CompressWithSubtractingOfZeroOnLeft" computerName="JASONB-PC" duration="00:00:00.0004099" startTime="2012-03-11T16:34:03.7447354-05:00" endTime="2012-03-11T16:34:03.7487356-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de56d25f-6738-4298-b1b4-9630cdad85d6">
    </UnitTestResult>
    <UnitTestResult executionId="f20e3cc9-c81d-40d6-8fb9-8d8c4a8b45a4" testId="7d3bdd0f-891f-e270-3572-e64070ef3d7d" testName="MutateOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014633" startTime="2012-03-11T16:34:03.7497357-05:00" endTime="2012-03-11T16:34:03.7547360-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f20e3cc9-c81d-40d6-8fb9-8d8c4a8b45a4">
    </UnitTestResult>
    <UnitTestResult executionId="98c2e301-c637-4776-9636-100f14df7360" testId="7df79ab5-7ace-17ec-de4c-7a8e23a8d813" testName="ReplaceParameterInUnsupportedBinaryExpression" computerName="JASONB-PC" duration="00:00:00.0012536" startTime="2012-03-11T16:34:03.7557360-05:00" endTime="2012-03-11T16:34:03.7607363-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98c2e301-c637-4776-9636-100f14df7360">
    </UnitTestResult>
    <UnitTestResult executionId="fcd0d768-0ec8-43a2-90e8-5c84dc8a7b99" testId="7dfec062-4513-dcee-89e6-5fca85fb96d0" testName="CreateViaFuncAndNullRandom" computerName="JASONB-PC" duration="00:00:00.0008365" startTime="2012-03-11T16:34:03.7617364-05:00" endTime="2012-03-11T16:34:03.7657366-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcd0d768-0ec8-43a2-90e8-5c84dc8a7b99">
    </UnitTestResult>
    <UnitTestResult executionId="6e7a5a70-78b1-41fc-8559-24919f184884" testId="7e5877b2-242f-0253-e229-d4f2e0ca8889" testName="CompressWithDividingOfParameters" computerName="JASONB-PC" duration="00:00:00.0005799" startTime="2012-03-11T16:34:03.7667367-05:00" endTime="2012-03-11T16:34:03.7707369-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e7a5a70-78b1-41fc-8559-24919f184884">
    </UnitTestResult>
    <UnitTestResult executionId="82e08cd6-8a99-4896-9207-364e05c0c553" testId="7f4f22f6-66f8-6241-4d21-2df753471ffb" testName="TerminatorWithNoTermination" computerName="JASONB-PC" duration="00:00:00.0024276" startTime="2012-03-11T16:34:03.7717369-05:00" endTime="2012-03-11T16:34:03.7777373-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82e08cd6-8a99-4896-9207-364e05c0c553">
    </UnitTestResult>
    <UnitTestResult executionId="99924d4f-bfbc-4eb6-bc72-0d3ff66d395e" testId="7f5a4d3c-3b53-b33b-cece-4d9cfd127a60" testName="ChangeValue" computerName="JASONB-PC" duration="00:00:00.0005825" startTime="2012-03-11T16:34:03.7787373-05:00" endTime="2012-03-11T16:34:03.7827376-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99924d4f-bfbc-4eb6-bc72-0d3ff66d395e">
    </UnitTestResult>
    <UnitTestResult executionId="8f5b01d0-13ec-43c6-9b31-b891ac7da49d" testId="802c6dbd-6d3c-650b-52f4-8d9e60e1172f" testName="CreateSubtractOfParameterAndPositiveConstant" computerName="JASONB-PC" duration="00:00:00.0027465" startTime="2012-03-11T16:34:03.7837376-05:00" endTime="2012-03-11T16:34:03.7897380-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f5b01d0-13ec-43c6-9b31-b891ac7da49d">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfParameterAndPositiveConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfParameterAndPositiveConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 156
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d04181dc-6826-46bd-b54a-33995a6cc077" testId="83e4aa55-a113-b029-00fd-1fd47a71a678" testName="Copy" computerName="JASONB-PC" duration="00:00:00.0014184" startTime="2012-03-11T16:34:03.7907380-05:00" endTime="2012-03-11T16:34:03.7957383-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d04181dc-6826-46bd-b54a-33995a6cc077">
    </UnitTestResult>
    <UnitTestResult executionId="d4f538a3-689e-4b29-b8d3-270be75b040f" testId="849564e3-0417-8269-e89a-7622011fa6d3" testName="CompressComplexExpressionWithManyConstants" computerName="JASONB-PC" duration="00:00:00.0011073" startTime="2012-03-11T16:34:03.7967384-05:00" endTime="2012-03-11T16:34:03.8017387-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4f538a3-689e-4b29-b8d3-270be75b040f">
    </UnitTestResult>
    <UnitTestResult executionId="8bf61dd4-761f-4c0e-b4a8-2332f1494680" testId="88e29ecc-7226-820d-9dd4-7b7172cc23ae" testName="CheckTaskCountOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014390" startTime="2012-03-11T16:34:03.8027387-05:00" endTime="2012-03-11T16:34:03.8077390-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bf61dd4-761f-4c0e-b4a8-2332f1494680">
    </UnitTestResult>
    <UnitTestResult executionId="0fc4c353-0f89-4fa8-bcce-39eb7567067b" testId="89686dd6-ef6f-28f9-c33f-67a7e3bfdf42" testName="CheckNumberOfGenerationRunsOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014178" startTime="2012-03-11T16:34:03.8087391-05:00" endTime="2012-03-11T16:34:03.8137393-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fc4c353-0f89-4fa8-bcce-39eb7567067b">
    </UnitTestResult>
    <UnitTestResult executionId="adfcf65d-0bee-497b-b0e8-554963873483" testId="8a15324f-18f1-590c-5e12-c65c48d91962" testName="CreateAddOfParameterAndNegativeConstant" computerName="JASONB-PC" duration="00:00:00.0027240" startTime="2012-03-11T16:34:03.8147394-05:00" endTime="2012-03-11T16:34:03.8207397-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adfcf65d-0bee-497b-b0e8-554963873483">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfParameterAndNegativeConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfParameterAndNegativeConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 121
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0ae158f-0415-49d6-a811-a86174302632" testId="901a8106-e620-0cc3-b9ff-33c393033365" testName="CrossoverWithEmptyParents" computerName="JASONB-PC" duration="00:00:00.0020715" startTime="2012-03-11T16:34:03.8217398-05:00" endTime="2012-03-11T16:34:03.8287402-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0ae158f-0415-49d6-a811-a86174302632">
    </UnitTestResult>
    <UnitTestResult executionId="9e4e3569-b3e4-4869-b127-26526a7c13b8" testId="9060561f-35ae-fe31-72a2-ffb5c8690d4d" testName="CheckCrossoverProbabilityOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014473" startTime="2012-03-11T16:34:03.8307403-05:00" endTime="2012-03-11T16:34:03.8357406-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e4e3569-b3e4-4869-b127-26526a7c13b8">
    </UnitTestResult>
    <UnitTestResult executionId="c9e090c7-1f55-473a-91ad-1e25492726e4" testId="918bbf56-93ef-a46d-db60-ac0625525817" testName="CreateWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0006235" startTime="2012-03-11T16:34:03.8377407-05:00" endTime="2012-03-11T16:34:03.8417409-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9e090c7-1f55-473a-91ad-1e25492726e4">
    </UnitTestResult>
    <UnitTestResult executionId="d3f1c535-0ecb-433e-b972-37697334343e" testId="93b3b298-35b3-c72d-e7ed-f372281c6941" testName="CreateMultiplyOfParameterAndNegativeConstant" computerName="JASONB-PC" duration="00:00:00.0027561" startTime="2012-03-11T16:34:03.8447411-05:00" endTime="2012-03-11T16:34:03.8507415-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3f1c535-0ecb-433e-b972-37697334343e">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfParameterAndNegativeConstant threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfParameterAndNegativeConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 177
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="57558827-9554-4523-b16a-0579d33c971b" testId="942514c3-c01e-bf4f-4ef5-ba31bb835b5e" testName="CompressWithSubtractingWithSameExpressionOnBothSides" computerName="JASONB-PC" duration="00:00:00.0006980" startTime="2012-03-11T16:34:03.8517415-05:00" endTime="2012-03-11T16:34:03.8567418-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="57558827-9554-4523-b16a-0579d33c971b">
    </UnitTestResult>
    <UnitTestResult executionId="01ac632c-9558-4535-856b-633b4cc0a97b" testId="949e61c3-7d7c-be8d-9157-25c4f7ff819f" testName="Mutate" computerName="JASONB-PC" duration="00:00:00.0028985" startTime="2012-03-11T16:34:03.8587419-05:00" endTime="2012-03-11T16:34:03.8647423-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01ac632c-9558-4535-856b-633b4cc0a97b">
    </UnitTestResult>
    <UnitTestResult executionId="4bd59dd4-1de5-437a-b0a0-cde14f9ff4ce" testId="98ed3766-1d5a-b3bf-a72c-cada89a514ee" testName="CompressWithDividingOfConstantsOnLeft" computerName="JASONB-PC" duration="00:00:00.0006486" startTime="2012-03-11T16:34:03.8667424-05:00" endTime="2012-03-11T16:34:03.8707426-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bd59dd4-1de5-437a-b0a0-cde14f9ff4ce">
    </UnitTestResult>
    <UnitTestResult executionId="3ca5b236-3b77-42b7-94ab-0990efcf020f" testId="99184710-3de1-c7d4-818c-f2ba2522551b" testName="CreateMultiplyOfNegativeConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0027432" startTime="2012-03-11T16:34:03.8717427-05:00" endTime="2012-03-11T16:34:03.8787431-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ca5b236-3b77-42b7-94ab-0990efcf020f">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfNegativeConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateMultiplyOfNegativeConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 163
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4deba5e-325f-404f-b3c1-c3047cec995f" testId="9be014b3-020f-bf8f-33fd-dae1c97f1ae0" testName="IsValidWithNaN" computerName="JASONB-PC" duration="00:00:00.0002970" startTime="2012-03-11T16:34:03.8797431-05:00" endTime="2012-03-11T16:34:03.8837433-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4deba5e-325f-404f-b3c1-c3047cec995f">
    </UnitTestResult>
    <UnitTestResult executionId="74259da4-9f01-4d93-b5bd-d13d7b8b4118" testId="9bebaeb1-9206-e380-e60f-f3b97f9382d4" testName="SelectFittestChildren" computerName="JASONB-PC" duration="00:00:00.0026836" startTime="2012-03-11T16:34:03.8857435-05:00" endTime="2012-03-11T16:34:03.8917438-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74259da4-9f01-4d93-b5bd-d13d7b8b4118">
    </UnitTestResult>
    <UnitTestResult executionId="02d7443a-ba23-4cce-8841-9f2d8cda45fc" testId="9c89f597-df52-942d-68ee-3d7a931b4c43" testName="ReplaceParameterInDivideOnLeft" computerName="JASONB-PC" duration="00:00:00.0008840" startTime="2012-03-11T16:34:03.8927439-05:00" endTime="2012-03-11T16:34:03.8977441-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02d7443a-ba23-4cce-8841-9f2d8cda45fc">
    </UnitTestResult>
    <UnitTestResult executionId="271bc23f-d938-45b2-a43d-da8c58c4d732" testId="9d87bc7a-0c76-c5fb-53a5-bb25a5d44672" testName="CompressWithPowerOfParameters" computerName="JASONB-PC" duration="00:00:00.0005158" startTime="2012-03-11T16:34:03.8987442-05:00" endTime="2012-03-11T16:34:03.9017444-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="271bc23f-d938-45b2-a43d-da8c58c4d732">
    </UnitTestResult>
    <UnitTestResult executionId="67d5bbf4-62e5-4d3b-97f5-df3efa5566ea" testId="a07266ba-5b60-f63e-b1f6-6d8bb37febf9" testName="CreateViaFuncCountVarianceAndNullRandom" computerName="JASONB-PC" duration="00:00:00.0008417" startTime="2012-03-11T16:34:03.9037445-05:00" endTime="2012-03-11T16:34:03.9077447-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67d5bbf4-62e5-4d3b-97f5-df3efa5566ea">
    </UnitTestResult>
    <UnitTestResult executionId="353ec280-68f1-46b5-b4c2-1e32cb1562f2" testId="a7b466f3-b0b8-ec7e-a4c2-258f94c96244" testName="CrossoverWithNullParents" computerName="JASONB-PC" duration="00:00:00.0014191" startTime="2012-03-11T16:34:03.9087448-05:00" endTime="2012-03-11T16:34:03.9137451-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="353ec280-68f1-46b5-b4c2-1e32cb1562f2">
    </UnitTestResult>
    <UnitTestResult executionId="aa22f5d0-3b5f-405d-ba2a-7dae27ed4df1" testId="aa582909-a333-6920-c690-9f7793ad5b86" testName="CompressComplexExpressionWithUnnecessarySubtractionOfZeros" computerName="JASONB-PC" duration="00:00:00.0014858" startTime="2012-03-11T16:34:03.9157452-05:00" endTime="2012-03-11T16:34:03.9197454-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa22f5d0-3b5f-405d-ba2a-7dae27ed4df1">
    </UnitTestResult>
    <UnitTestResult executionId="8454f403-4d04-4fa6-a138-98692219ef13" testId="aadb1ec8-7bce-3611-7252-55dc9eac7d4c" testName="CompressWithMultiplyingOfZeroOnRight" computerName="JASONB-PC" duration="00:00:00.0005491" startTime="2012-03-11T16:34:03.9207455-05:00" endTime="2012-03-11T16:34:03.9247457-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8454f403-4d04-4fa6-a138-98692219ef13">
    </UnitTestResult>
    <UnitTestResult executionId="abcf7a3f-587e-4197-a21e-568a4030ee82" testId="ad90abf8-49c4-ed93-d60a-b113fa04d26f" testName="SelectFittestChildrenOnNullArgument" computerName="JASONB-PC" duration="00:00:00.0014563" startTime="2012-03-11T16:34:03.9257457-05:00" endTime="2012-03-11T16:34:03.9307460-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abcf7a3f-587e-4197-a21e-568a4030ee82">
    </UnitTestResult>
    <UnitTestResult executionId="a0ce5979-22bb-48e7-b0d7-3606d43e2910" testId="ad986776-9530-256a-a701-5b49f8c704a3" testName="CompressWithMultiplyingOfConstantsOnRight" computerName="JASONB-PC" duration="00:00:00.0006338" startTime="2012-03-11T16:34:03.9317461-05:00" endTime="2012-03-11T16:34:03.9357463-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0ce5979-22bb-48e7-b0d7-3606d43e2910">
    </UnitTestResult>
    <UnitTestResult executionId="83f44704-90d5-44f7-aafb-182657703e22" testId="adff05a7-0f7e-dabb-caa6-b91b39b6cc7b" testName="ReplacePowerLeftPart" computerName="JASONB-PC" duration="00:00:00.0010143" startTime="2012-03-11T16:34:03.9367464-05:00" endTime="2012-03-11T16:34:03.9407466-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83f44704-90d5-44f7-aafb-182657703e22">
    </UnitTestResult>
    <UnitTestResult executionId="028b48ad-be74-40c0-9838-d2c6880eebd5" testId="b72108f6-cb42-1119-316b-bf696ea40c3d" testName="CompressWithMultiplyingOfZeroOnLeft" computerName="JASONB-PC" duration="00:00:00.0005498" startTime="2012-03-11T16:34:03.9427467-05:00" endTime="2012-03-11T16:34:03.9467469-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="028b48ad-be74-40c0-9838-d2c6880eebd5">
    </UnitTestResult>
    <UnitTestResult executionId="f5b6436a-b0cf-4d27-af2a-58d94f8ccf93" testId="b866fbd2-8aa4-0c63-2595-11ab29a3e586" testName="GetNodeWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0005620" startTime="2012-03-11T16:34:03.9487471-05:00" endTime="2012-03-11T16:34:03.9527473-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5b6436a-b0cf-4d27-af2a-58d94f8ccf93">
    </UnitTestResult>
    <UnitTestResult executionId="3f65e322-667d-4cae-b80a-6e71979aa25f" testId="b9122787-c565-f85f-04fa-406c138ae10a" testName="ReplaceParameterInAddOnLeft" computerName="JASONB-PC" duration="00:00:00.0008487" startTime="2012-03-11T16:34:03.9537473-05:00" endTime="2012-03-11T16:34:03.9587476-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f65e322-667d-4cae-b80a-6e71979aa25f">
    </UnitTestResult>
    <UnitTestResult executionId="2f4d7c39-993f-428c-9e7f-ea951bfda005" testId="bba56e8c-c7de-a40a-e256-d2721bd7ce36" testName="EvaluateFitnessWhenResultExpectationIsException" computerName="JASONB-PC" duration="00:00:00.0010964" startTime="2012-03-11T16:34:03.9597477-05:00" endTime="2012-03-11T16:34:03.9637479-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f4d7c39-993f-428c-9e7f-ea951bfda005">
    </UnitTestResult>
    <UnitTestResult executionId="8be010be-1118-4ebc-a30e-9b396bbc1cb9" testId="bd34201d-f4d6-1b8b-6e65-4505201b44ae" testName="CreateViaResultsAndNullRandom" computerName="JASONB-PC" duration="00:00:00.0008673" startTime="2012-03-11T16:34:03.9647480-05:00" endTime="2012-03-11T16:34:03.9687482-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8be010be-1118-4ebc-a30e-9b396bbc1cb9">
    </UnitTestResult>
    <UnitTestResult executionId="e1c62756-c508-442f-b8f8-4f0fdbac4589" testId="beaca5b9-4d5b-cf84-2fca-3b3ad73419d3" testName="GeneratePopulationOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014313" startTime="2012-03-11T16:34:03.9697483-05:00" endTime="2012-03-11T16:34:03.9747486-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1c62756-c508-442f-b8f8-4f0fdbac4589">
    </UnitTestResult>
    <UnitTestResult executionId="a85d65ca-924f-49c9-b29e-a1b782da6b13" testId="bf25a094-527a-e4de-26fd-e6bc13571a24" testName="Create" computerName="JASONB-PC" duration="00:00:00.0004413" startTime="2012-03-11T16:34:03.9757486-05:00" endTime="2012-03-11T16:34:03.9797488-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a85d65ca-924f-49c9-b29e-a1b782da6b13">
    </UnitTestResult>
    <UnitTestResult executionId="d098a18c-e1d8-4d1e-a4a1-1e2416542184" testId="bf543379-04a4-a02b-8d45-d6415372de17" testName="ReplaceUnsupportedBinaryExpression" computerName="JASONB-PC" duration="00:00:00.0010848" startTime="2012-03-11T16:34:03.9807489-05:00" endTime="2012-03-11T16:34:03.9857492-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d098a18c-e1d8-4d1e-a4a1-1e2416542184">
    </UnitTestResult>
    <UnitTestResult executionId="e01a883a-3596-4ddb-b5e6-2844d1cb24a9" testId="c014d805-2e93-5f2d-b8ae-00a710954321" testName="CompressWithDividingOfConstantsOnRight" computerName="JASONB-PC" duration="00:00:00.0006319" startTime="2012-03-11T16:34:03.9867492-05:00" endTime="2012-03-11T16:34:03.9907495-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e01a883a-3596-4ddb-b5e6-2844d1cb24a9">
    </UnitTestResult>
    <UnitTestResult executionId="2d993d60-05c3-4fc0-a72b-ba5a2ea4f834" testId="c0774163-4740-3786-cd9e-22e121b74125" testName="ReplaceParameterInPowerOnLeft" computerName="JASONB-PC" duration="00:00:00.0008590" startTime="2012-03-11T16:34:03.9917495-05:00" endTime="2012-03-11T16:34:03.9957498-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2d993d60-05c3-4fc0-a72b-ba5a2ea4f834">
    </UnitTestResult>
    <UnitTestResult executionId="3c15479e-5ca5-43ac-ab1a-99e02d2ba62a" testId="c1cad183-8169-5200-ebfd-3c3d95b13a6a" testName="EvaluateFitnessWithExceptionAndResultExpectationIsNotException" computerName="JASONB-PC" duration="00:00:00.0014627" startTime="2012-03-11T16:34:03.9967498-05:00" endTime="2012-03-11T16:34:04.0017501-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c15479e-5ca5-43ac-ab1a-99e02d2ba62a">
    </UnitTestResult>
    <UnitTestResult executionId="cb0639c9-bbea-4b75-934d-7b494354ea48" testId="c3ccfe1d-c4b4-9f37-0960-9ad2697c4c0d" testName="CreateParameterOnlyBody" computerName="JASONB-PC" duration="00:00:00.0006261" startTime="2012-03-11T16:34:04.0027502-05:00" endTime="2012-03-11T16:34:04.0067504-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb0639c9-bbea-4b75-934d-7b494354ea48">
    </UnitTestResult>
    <UnitTestResult executionId="e3c2c64c-c5de-493c-b3d2-dd33facbb1c6" testId="c3f2bd76-0a8d-69b3-b781-986375cfb603" testName="ReplacePower" computerName="JASONB-PC" duration="00:00:00.0007794" startTime="2012-03-11T16:34:04.0077504-05:00" endTime="2012-03-11T16:34:04.0117507-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3c2c64c-c5de-493c-b3d2-dd33facbb1c6">
    </UnitTestResult>
    <UnitTestResult executionId="eefab11e-fade-4282-9155-855ed113c565" testId="c3f763d9-28f6-2067-89b7-5f6a8d0e3843" testName="CreateWithNullRandom" computerName="JASONB-PC" duration="00:00:00.0006473" startTime="2012-03-11T16:34:04.0127507-05:00" endTime="2012-03-11T16:34:04.0177510-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eefab11e-fade-4282-9155-855ed113c565">
    </UnitTestResult>
    <UnitTestResult executionId="86879331-5bc1-4ac9-9d4b-3180ed0ff316" testId="c5a2ab0b-1853-8e05-6421-92ece8e1baa7" testName="ReplaceDivide" computerName="JASONB-PC" duration="00:00:00.0007474" startTime="2012-03-11T16:34:04.0187511-05:00" endTime="2012-03-11T16:34:04.0227513-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86879331-5bc1-4ac9-9d4b-3180ed0ff316">
    </UnitTestResult>
    <UnitTestResult executionId="4ca454ff-da52-43d9-8a04-7998ab1ac38e" testId="c70a18ef-9246-da0c-496a-a539ee306630" testName="RunOneGenerationWithSuccessfulTerminationAndCrossover" computerName="JASONB-PC" duration="00:00:00.0062237" startTime="2012-03-11T16:34:04.0237514-05:00" endTime="2012-03-11T16:34:04.0337519-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ca454ff-da52-43d9-8a04-7998ab1ac38e">
    </UnitTestResult>
    <UnitTestResult executionId="0e40eedc-0c79-483a-be58-b9aa5033911e" testId="cb17197f-0154-7523-6635-0ed45555e335" testName="CreateWithResult" computerName="JASONB-PC" duration="00:00:00.0005632" startTime="2012-03-11T16:34:04.0347520-05:00" endTime="2012-03-11T16:34:04.0387522-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e40eedc-0c79-483a-be58-b9aa5033911e">
    </UnitTestResult>
    <UnitTestResult executionId="daf0f1f0-9a84-4a0e-b61b-0f576e99861f" testId="cb9a5a97-4d41-ec98-f014-c7ae293c1bfa" testName="Replace" computerName="JASONB-PC" duration="00:00:00.0018540" startTime="2012-03-11T16:34:04.0397523-05:00" endTime="2012-03-11T16:34:04.0447526-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="daf0f1f0-9a84-4a0e-b61b-0f576e99861f">
    </UnitTestResult>
    <UnitTestResult executionId="9b031aec-9f79-406d-8d02-77c66681be8b" testId="cc32baca-2626-858f-2354-1fdfc73c00f5" testName="CreateWhenPopulationIsEmpty" computerName="JASONB-PC" duration="00:00:00.0006498" startTime="2012-03-11T16:34:04.0457526-05:00" endTime="2012-03-11T16:34:04.0507529-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b031aec-9f79-406d-8d02-77c66681be8b">
    </UnitTestResult>
    <UnitTestResult executionId="720db399-b6d8-4145-8c11-988bb2bc4569" testId="ce0e6eda-1070-1579-b632-edd303fc39c4" testName="CompressWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0005466" startTime="2012-03-11T16:34:04.0517530-05:00" endTime="2012-03-11T16:34:04.0557532-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="720db399-b6d8-4145-8c11-988bb2bc4569">
    </UnitTestResult>
    <UnitTestResult executionId="8858a409-d4f6-4232-975d-e5dbee787d9f" testId="d3aa65ac-a753-4de0-9a8c-d170f7009390" testName="CompressWithMultiplyingOfParameters" computerName="JASONB-PC" duration="00:00:00.0005113" startTime="2012-03-11T16:34:04.0567532-05:00" endTime="2012-03-11T16:34:04.0607535-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8858a409-d4f6-4232-975d-e5dbee787d9f">
    </UnitTestResult>
    <UnitTestResult executionId="c53c9b22-0434-4d84-9b59-be70c4b44f1e" testId="d45d383d-b0e8-35a9-9d25-957bda1ab547" testName="CreateViaResultsAndRandom" computerName="JASONB-PC" duration="00:00:00.0007063" startTime="2012-03-11T16:34:04.0617535-05:00" endTime="2012-03-11T16:34:04.0657538-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c53c9b22-0434-4d84-9b59-be70c4b44f1e">
    </UnitTestResult>
    <UnitTestResult executionId="4dc0451a-28e0-4f37-adbe-97e9c05db941" testId="d5ef73cf-1f94-c408-005b-936413a6c714" testName="CreateSubtractOfNegativeConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0027375" startTime="2012-03-11T16:34:04.0667538-05:00" endTime="2012-03-11T16:34:04.0727542-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dc0451a-28e0-4f37-adbe-97e9c05db941">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfNegativeConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateSubtractOfNegativeConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 135
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a4aab5b-99a1-4f55-9351-3ca9df6418d4" testId="d64f49d1-7c69-0455-071b-424f4bab12aa" testName="SelectFittestChildrenOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014916" startTime="2012-03-11T16:34:04.0737542-05:00" endTime="2012-03-11T16:34:04.0787545-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a4aab5b-99a1-4f55-9351-3ca9df6418d4">
    </UnitTestResult>
    <UnitTestResult executionId="95467ea7-0c4c-4e6d-a5b0-08df8543d149" testId="d77ff7e3-5de7-96c2-846f-5560f6f1fc92" testName="CreateViaFunc" computerName="JASONB-PC" duration="00:00:00.0012414" startTime="2012-03-11T16:34:04.0807546-05:00" endTime="2012-03-11T16:34:04.0857549-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95467ea7-0c4c-4e6d-a5b0-08df8543d149">
    </UnitTestResult>
    <UnitTestResult executionId="e0fb9db9-c12f-4e2c-9e02-bc0107b844a0" testId="dbf1ea4e-cd32-6e47-f99f-855986f06976" testName="CreateViaFuncCountAndVariance" computerName="JASONB-PC" duration="00:00:00.0016590" startTime="2012-03-11T16:34:04.0877550-05:00" endTime="2012-03-11T16:34:04.0937554-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0fb9db9-c12f-4e2c-9e02-bc0107b844a0">
    </UnitTestResult>
    <UnitTestResult executionId="382623b7-0716-4d49-a8de-c5ed75fcff59" testId="dd3a28f8-36e3-d38f-5430-d99446e2ec93" testName="CreateAddOfNegativeConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0028587" startTime="2012-03-11T16:34:04.0947554-05:00" endTime="2012-03-11T16:34:04.1087562-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="382623b7-0716-4d49-a8de-c5ed75fcff59">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfNegativeConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateAddOfNegativeConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 107
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3bd43ae7-cad7-4204-acbd-2e29c99d49c8" testId="e4db20be-90e9-179b-c19f-4ef2c00bf22a" testName="CreateViaEmptyResults" computerName="JASONB-PC" duration="00:00:00.0008962" startTime="2012-03-11T16:34:04.1107563-05:00" endTime="2012-03-11T16:34:04.1187568-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3bd43ae7-cad7-4204-acbd-2e29c99d49c8">
    </UnitTestResult>
    <UnitTestResult executionId="012faaee-5b5e-45bc-9323-e8a6d64a5070" testId="eb115a9c-28b6-13ae-0054-4f87878ed931" testName="CreateExpressionWhenBothSidesAreConstantsNegativeConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0033720" startTime="2012-03-11T16:34:04.1207569-05:00" endTime="2012-03-11T16:34:04.1277573-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="012faaee-5b5e-45bc-9323-e8a6d64a5070">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateExpressionWhenBothSidesAreConstantsNegativeConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateExpressionWhenBothSidesAreConstantsNegativeConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 100
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7456941-212d-403d-abc9-e421e7c648b0" testId="ec92ad0b-8559-bd43-9e1e-87fa0e671c77" testName="ReplaceSubtractLeftPart" computerName="JASONB-PC" duration="00:00:00.0010662" startTime="2012-03-11T16:34:04.1287574-05:00" endTime="2012-03-11T16:34:04.1327576-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7456941-212d-403d-abc9-e421e7c648b0">
    </UnitTestResult>
    <UnitTestResult executionId="356f110e-b7a9-48f4-874c-ad0f675d7127" testId="edefbbf0-6ba6-354f-ebeb-47134e27a2ac" testName="RunOneGenerationWithUnsuccessfulTermination" computerName="JASONB-PC" duration="00:00:00.0051215" startTime="2012-03-11T16:34:04.1347577-05:00" endTime="2012-03-11T16:34:04.1437582-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="356f110e-b7a9-48f4-874c-ad0f675d7127">
    </UnitTestResult>
    <UnitTestResult executionId="a79b7224-ca4d-47be-9a6e-b2e702c990fd" testId="ee1c1495-b6ee-41b5-a0aa-3f83ac036054" testName="CompressWithSubtractingOfConstantsOnLeft" computerName="JASONB-PC" duration="00:00:00.0006736" startTime="2012-03-11T16:34:04.1457583-05:00" endTime="2012-03-11T16:34:04.1507586-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a79b7224-ca4d-47be-9a6e-b2e702c990fd">
    </UnitTestResult>
    <UnitTestResult executionId="bfb64d03-921b-4961-91cc-7957c5204c88" testId="ee34faeb-5794-e3cb-90d0-7889ef3a2289" testName="CreateDivideOfNegativeConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0027618" startTime="2012-03-11T16:34:04.1517587-05:00" endTime="2012-03-11T16:34:04.1577590-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bfb64d03-921b-4961-91cc-7957c5204c88">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfNegativeConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfNegativeConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 191
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="15f2cd82-15ec-487c-86c1-672524f7ca6f" testId="efa922fe-8424-cb0a-8c63-10210e0eae92" testName="GetNodeOfLambda" computerName="JASONB-PC" duration="00:00:00.0006864" startTime="2012-03-11T16:34:04.1597591-05:00" endTime="2012-03-11T16:34:04.1637594-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15f2cd82-15ec-487c-86c1-672524f7ca6f">
    </UnitTestResult>
    <UnitTestResult executionId="2a91c9cc-bef7-40a7-8572-b697119271ef" testId="f2d06b69-1b53-bdfa-5c40-8170c9a0812c" testName="GetNodeCountWithNullArgument" computerName="JASONB-PC" duration="00:00:00.0005433" startTime="2012-03-11T16:34:04.1647594-05:00" endTime="2012-03-11T16:34:04.1697597-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a91c9cc-bef7-40a7-8572-b697119271ef">
    </UnitTestResult>
    <UnitTestResult executionId="0a44df79-d5f3-4908-9d4f-6772899f302e" testId="f69298a7-5abb-da05-7a04-2b502bb6d9b8" testName="ReplaceSubtract" computerName="JASONB-PC" duration="00:00:00.0009597" startTime="2012-03-11T16:34:04.1707598-05:00" endTime="2012-03-11T16:34:04.1767601-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a44df79-d5f3-4908-9d4f-6772899f302e">
    </UnitTestResult>
    <UnitTestResult executionId="eae2ddbe-0dba-4cfa-b0b4-79c4b4a4848e" testId="f6f5b952-6f59-66de-3925-4733e242b79a" testName="TerminatorOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0015615" startTime="2012-03-11T16:34:04.1777602-05:00" endTime="2012-03-11T16:34:04.1827604-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eae2ddbe-0dba-4cfa-b0b4-79c4b4a4848e">
    </UnitTestResult>
    <UnitTestResult executionId="c737cfea-81ae-41f3-ba3b-394bbe0d2e9a" testId="f8094fdf-0e77-87a9-d4c2-7fec63b1400d" testName="TerminatorWithTermination" computerName="JASONB-PC" duration="00:00:00.0021177" startTime="2012-03-11T16:34:04.1837605-05:00" endTime="2012-03-11T16:34:04.1897608-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c737cfea-81ae-41f3-ba3b-394bbe0d2e9a">
    </UnitTestResult>
    <UnitTestResult executionId="8dcabceb-b470-47cd-bf92-fa6e05c22fd0" testId="f8762649-4dde-5174-f3b6-4cb3c3013724" testName="CreateDivideOfPositiveConstantAndParameter" computerName="JASONB-PC" duration="00:00:00.0027452" startTime="2012-03-11T16:34:04.1917610-05:00" endTime="2012-03-11T16:34:04.1977613-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8dcabceb-b470-47cd-bf92-fa6e05c22fd0">
      <Output>
        <ErrorInfo>
          <Message>Test method ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfPositiveConstantAndParameter threw exception: 
System.InvalidOperationException: Too many NextDouble() calls.</Message>
          <StackTrace>    at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.&lt;&gt;c__DisplayClass3.&lt;GenerateExpression&gt;b__2(CallInfo _) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 81
   at NSubstitute.Core.ReturnValueFromFunc`1.ReturnFor(CallInfo info)
   at NSubstitute.Core.CallResults.GetResult(ICall call)
   at NSubstitute.Routing.Handlers.ReturnConfiguredResultHandler.Handle(ICall call)
   at NSubstitute.Routing.Route.&lt;&gt;c__DisplayClass3.&lt;Handle&gt;b__0(ICallHandler x)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass12`3.&lt;CombineSelectors&gt;b__11(TSource x)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at NSubstitute.Routing.Route.Handle(ICall call)
   at NSubstitute.Core.CallRouter.Route(ICall call)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleForwardingInterceptor.Intercept(IInvocation invocation)
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.SecureRandomProxy.NextDouble()
   at ExpressionEvolver.RandomExpressionGenerator.GetConstant() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 47
   at ExpressionEvolver.RandomExpressionGenerator.GetRandomOperation(Operators operator) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 77
   at ExpressionEvolver.RandomExpressionGenerator.GenerateBody(Int32 maximumOperationCount) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 42
   at ExpressionEvolver.RandomExpressionGenerator..ctor(Int32 maximumOperationCount, Double injectConstantProbabilityValue, Double constantLimit, ParameterExpression parameter, SecureRandom random) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver\RandomExpressionGenerator.cs:line 33
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.GenerateExpression(Int32 operationValue, Boolean isConstantPositive, Boolean isLeftConstant, Boolean isRightConstant) in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 87
   at ExpressionEvolver.Tests.RandomExpressionGeneratorTests.CreateDivideOfPositiveConstantAndParameter() in G:\JasonBock\Personal\Writing\Metaprogramming .NET\Code Samples\MetaDotNetBook\Chapter6\ExpressionEvolver\ExpressionEvolver.Tests\RandomExpressionGeneratorTests.cs:line 198
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c401e282-ca23-42ef-b0c1-80bee55ad3e3" testId="f9316b91-5da1-a00b-2ca8-83f832eb6330" testName="CrossoverOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0016866" startTime="2012-03-11T16:34:04.1997614-05:00" endTime="2012-03-11T16:34:04.2047617-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c401e282-ca23-42ef-b0c1-80bee55ad3e3">
    </UnitTestResult>
    <UnitTestResult executionId="668420b6-38c4-4b5f-be71-57f543e9d6d1" testId="fdcecf0b-35f3-d3b9-d177-940c415b4c00" testName="CheckPopulationSizeOnDisposedObject" computerName="JASONB-PC" duration="00:00:00.0014556" startTime="2012-03-11T16:34:04.2057618-05:00" endTime="2012-03-11T16:34:04.2107620-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="668420b6-38c4-4b5f-be71-57f543e9d6d1">
    </UnitTestResult>
    <UnitTestResult executionId="8e44983a-0fc8-4b8c-afe5-7749183d52cb" testId="feee3ce0-ca18-21c9-fc6b-c58977af3bbe" testName="CompressComplexExpressionForSubtractingSameValues" computerName="JASONB-PC" duration="00:00:00.0011188" startTime="2012-03-11T16:34:04.2117621-05:00" endTime="2012-03-11T16:34:04.2167624-05:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e44983a-0fc8-4b8c-afe5-7749183d52cb">
    </UnitTestResult>
  </Results>
</TestRun>